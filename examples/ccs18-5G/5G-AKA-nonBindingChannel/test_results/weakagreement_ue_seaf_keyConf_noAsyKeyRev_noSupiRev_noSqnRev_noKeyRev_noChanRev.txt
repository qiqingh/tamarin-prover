maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
theory 5G_aka begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: KDF/2, SHA256/2, adec/2, aenc/2, f1/2, f1_star/2, f2/2, f3/2,
           f4/2, f5/2, f5_star/2, fst/1, get_RAND/2, pair/2, pk/1, sign/2, snd/1,
           true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

tactic: sqn_many
presort: C
prio: {id}
  regex".*St_1_UE\(.*"
  regex".*St_1_HSS\(.*"
prio: {id}
  regex".*Sqn_UE\(.*"
  regex".*Sqn_HSS\(.*"


tactic: sqn_ue_nodecrease
presort: C
prio: {id}
  regex".*\(last\(#j.*"
prio: {id}
  regex".*Sqn_UE_Change\(.*"
prio: {id}
  regex".*\(#vr<#i\).*"
prio: {id}
  regex".*Sqn_UE\(.*count.1.*"


tactic: secrecy_ue_kseaf_noKeyRev_noSupiRev_noSqnRev_noAsyKeyRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
  regex".*~~>*"
prio: {id}
  regex".*St_.*\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*Sec\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"


tactic: secrecy_ue_kseaf
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
  regex".*~~>*"
prio: {id}
  regex".*St_.*\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"


tactic: secrecy_ue_supi
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
  regex".*=.*=.*=.*"
  regex".*~~>*"
prio: {id}
  regex".*St_.*\(.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*RcvS\(.*\'aia\'.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*!KU\(KDF\(<f3\(.*"
  regex".*!KU\(f1\(KDF\(KDF\(.*"
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"


tactic: secrecy_hss_no_k
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
  regex".*=.*=.*=.*"
  regex".*~~>*"
prio: {id}
  regex".*St_.*\(.*"
  regex".*Sec\(.*"
prio: {id}
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*RcvS\(.*"
  regex".*!KU\(SHA256\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"


tactic: secrecy_hss_supi_noChanRevAtAll_noSupiRev_noAsyKeyRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,'1',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
  regex".*=.*=.*=.*"
  regex".*~~>*"
prio: {id}
  regex".*St_.*\(.*"
  regex".*Sec\(.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*RcvS\(.*"
  regex".*!KU\(SHA256\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"


tactic: secrecy_hss_kseaf_noChanRev_noSupiRev_noSqnRev_noAsyKeyRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
  regex".*=.*=.*=.*"
  regex".*~~>*"
prio: {id}
  regex".*St_.*\(.*"
  regex".*Sec\(.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*!KU\(SHA256\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"


tactic: secrecy_hss_kseaf_noChanRev_noKeyRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
  regex".*=.*=.*=.*"
  regex".*~~>*"
prio: {id}
  regex".*St_.*\(.*"
  regex".*Sec\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*!KU\(SHA256\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"


tactic: secrecy_seaf
presort: s
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
  regex".*=.*=.*=.*"
  regex".*~~>*"
prio: {id}
  regex".*St_.*\(.*"
  regex".*Sec\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*RcvS\(.*"
  regex".*!KU\(SHA256\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"


tactic: secrecy_seaf_supi_noChanRevAtAll_noSupiRev_noAsyKeyRev
presort: s
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
  regex".*=.*=.*=.*"
  regex".*~~>*"
prio: {id}
  regex".*St_.*\(.*"
  regex".*Sec\(.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*RcvS\(.*"
  regex".*!KU\(SHA256\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"


tactic: secrecy_seaf_kseaf_noChanRev_noKeyRev
presort: s
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
  regex".*=.*=.*=.*"
  regex".*~~>*"
prio: {id}
  regex".*St_.*\(.*"
  regex".*Sec\(.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*RcvS\(.*"
  regex".*!KU\(SHA256\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"


tactic: weakagreement_hss_ue_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*St_1_HSS\(.*"
prio: {id}
  regex".*!KU\(KDF\(<f3\(.*"
prio: {id}
  regex".*RcvS\(.*\'ac\'.*"
prio: {id}
  regex".*RcvS\(.*\'aia\'.*"
prio: {id}
  regex".*RcvS\(.*\'air\'.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(aenc\(.*"


tactic: weakagreement_hss_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
prio: {id}
  regex".*St_1_SEAF\(.*"
  regex".*Sec\(.*"
prio: {id}
  regex".*~~>.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*St_1_HSS\(.*"
prio: {id}
  regex".*!KU\(KDF\(<f3\(.*"
prio: {id}
  regex".*!KU\(f1\(~k.*"
prio: {id}
  regex".*!KU\(\(f5\(~k.*"
  regex".*!KD\(\(f5\(~k.*"
prio: {id}
  regex".*!KU\(~sqn.*"
prio: {id}
  regex".*RcvS\(.*\'ac\'.*"
prio: {id}
  regex".*RcvS\(.*\'aia\'.*"
prio: {id}
  regex".*RcvS\(.*\'air\'.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(aenc\(.*"


tactic: noninjectiveagreement_hss_seaf_supi_noRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
prio: {id}
  regex".*St_1_SEAF\(.*"
  regex".*Sec\(.*"
prio: {id}
  regex".*~~>.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*St_1_HSS\(.*"
prio: {id}
  regex".*!KU\(KDF\(<f3\(.*"
prio: {id}
  regex".*!KU\(f1\(~k.*"
prio: {id}
  regex".*!KU\(\(f5\(~k.*"
  regex".*!KD\(\(f5\(~k.*"
prio: {id}
  regex".*!KU\(~sqn.*"
prio: {id}
  regex".*RcvS\(.*\'ac\'.*"
prio: {id}
  regex".*RcvS\(.*\'aia\'.*"
prio: {id}
  regex".*RcvS\(.*\'air\'.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(aenc\(.*"


tactic: noninjectiveagreement
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*St_1_HSS\(.*"
prio: {id}
  regex".*!KU\(KDF\(<f3\(.*"
prio: {id}
  regex".*RcvS\(.*\'ac\'.*"
prio: {id}
  regex".*RcvS\(.*\'aia\'.*"
prio: {id}
  regex".*RcvS\(.*\'air\'.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(aenc\(.*"


tactic: injective_agreemeent
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*!KU\(f2\(.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*St_1_UE\(.*"
  regex".*St_1_HSS\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*!KU\(KDF\(<f3.*"
prio: {id}
  regex".*RcvS\(.*<\'ac\'.*"


tactic: cleanAttack
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
prio: {id}
  regex".*!KU\(f2\(.*"
prio: {id}
  regex".*!KU\(f5\(.*" | regex".*!KU\(f5_star\(.*" | regex".*!KU\(f3\(.*"
prio: {id}
  regex".*!KU\(~sqn_root.*"
prio: {id}
  regex".*!KU\(KDF\(KDF\(<f3.*"
prio: {id}
  regex".*\(#.*=#.*\).*\(#.*=#.*\).*\(#.*=#.*\).*"
prio: {id}
  regex".*St_1_UE\(.*"
  regex".*St_2_UE\(.*"
prio: {id}
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*CommitConf\(.*"
prio: {id}
  regex".*~~.*"
prio: {id}
  regex".*!KU\(KDF\(<f3\(.*"
  regex".*!KU\(f1\(~.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*!KU\(\(f5\(~k,.*"
  regex".*!KD\(\(f5\(~k,.*"
prio: {id}
  regex".*!KU\(f1\(K.*"
prio: {id}
  regex".*!KU\(~RAND.*"


tactic: tactic_0
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*!KU\(~sk.*"
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(f2\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5\(.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*CommitConf\(.*"
prio: {id}
  regex".*St_2_SEAF\(.*"
  regex".*St_3_SEAF\(.*"
  regex".*St_4_SEAF\(.*"
  regex".*St_1_UE\(.*"
  regex".*St_2_UE\(.*"
prio: {id}
  regex".*!KU\(f1\(KDF\(KDF\(.*"
  regex".*!KU\(KDF\(KDF\(.*"
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*RcvS\(.*<\'aia\'.*"


tactic: injectiveagreement_hss_seaf_kseaf_noChanRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*St_1_HSS\(.*"
prio: {id}
  regex".*RcvS\(.*"


tactic: tactic_1
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(~sk.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*CommitConf\(.*"
  regex".*St_1_UE\(.*"
  regex".*St_2_UE\(.*"
prio: {id}
  regex".*!KU\(\(f5\(~k,.*"
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f3\(.*"
  regex".*!KU\(f4\(.*"
  regex".*!KU\(f5_star\(.*"
prio: {id}
  regex".*!KU\(f1\(~.*"
prio: {id}
  regex".*!KU\(f1\(K.*"
prio: {id}
  regex".*!KU\(KDF\(KDF\(.*"
  regex".*!KU\(KDF\(<f3.*"
prio: {id}
  regex".*Sqn_UE\(.*"
  regex".*!KU\(~sqn_roo.*"


tactic: weakagreement_ue_seaf_keyConf_noRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(f5\(.*" | regex".*!KU\(f5_star\(.*"
prio: {id}
  regex".*!KU\(~sqn_root.*"
prio: {id}
  regex".*St_2_UE\(.*"
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(KDF\(<f3\(.*"
  regex".*!KU\(KDF\(KDF\(<f3\(.*"
  regex".*!KU\(f1\(KDF\(KDF\(<f3\(~k.*"
  regex".*!KU\(f3\(~k*"
prio: {id}
  regex".*St_1_UE\(.*"
  regex".*St_1_SEAF\(.*"
  regex".*St_3_SEAF\(.*"
prio: {id}
  regex".*~~>.*"
prio: {id}
  regex".*RcvS\(~idSN.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*!Ltk_Sym\(.*"
prio: {id}
  regex".*!KU\(f4\(.*"
prio: {id}
  regex".*St_2_SEAF\(.*"
  regex".*St_1_HSS\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(~RAN.*"
prio: {id}
  regex".*!KU\(~sup.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(~sup.*"
prio: {id}
  regex".*!KU\(~sk.*"


tactic: weakagreement_ue_seaf_noRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(f5\(.*" | regex".*!KU\(f5_star\(.*"
prio: {id}
  regex".*!KU\(~sqn_root.*"
prio: {id}
  regex".*St_1_UE\(.*"
  regex".*St_2_UE\(.*"
  regex".*St_3_SEAF\(.*"
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*~~>.*"
prio: {id}
  regex".*RcvS\(~idSN.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*!Ltk_Sym\(.*"
prio: {id}
  regex".*!KU\(f4\(.*"
prio: {id}
  regex".*St_2_SEAF\(.*"
  regex".*St_1_HSS\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(~RAN.*"
prio: {id}
  regex".*!KU\(~sup.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(~sup.*"
prio: {id}
  regex".*!KU\(~sk.*"


tactic: tactic_2
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*!KU\(~sk_HN.*"
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(f5\(.*"
  regex".*!KU\(f5_star\(.*"
prio: {id}
  regex".*!KU\(~sqn_root.*"
prio: {id}
  regex".*~~.*"
  regex".*=.*=.*=.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*St_3_SEAF\(.*"
  regex".*St_4_SEAF\(.*"
prio: {id}
  regex".*RcvS\(.*<\'aca\'.*"
prio: {id}
  regex".*RcvS\(.*<\'ac\'.*"
prio: {id}
  regex".*!KU\(KDF\(<f3\(.*"
  regex".*!KU\(KDF\(KDF\(<.*"
prio: {id}
  regex".*!KU\(f3\(.*"
prio: {id}
  regex".*RcvS\(.*<\'aia\'.*"
prio: {id}
  regex".*RcvS\(.*<\'air\'.*"
prio: {id}
  regex".*!KU\(\(f5\(~k.*"
  regex".*!KD\(\(f5\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(f1\(~.*"
prio: {id}
  regex".*!KU\(f1\(K.*"


tactic: tactic_3
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*!KU\(~sk_HN.*"
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(f5\(.*" | regex".*!KU\(f5_star\(.*"
prio: {id}
  regex".*!KU\(~sqn_root.*"
prio: {id}
  regex".*~~.*"
  regex".*=.*=.*=.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*St_3_SEAF\(.*"
  regex".*St_4_SEAF\(.*"
prio: {id}
  regex".*RcvS\(.*<\'aca\'.*"
prio: {id}
  regex".*RcvS\(.*<\'ac\'.*"
prio: {id}
  regex".*!KU\(KDF\(<f3\(.*"
  regex".*!KU\(KDF\(KDF\(<.*"
prio: {id}
  regex".*!KU\(f3\(.*"
prio: {id}
  regex".*RcvS\(.*<\'aia\'.*"
prio: {id}
  regex".*RcvS\(.*<\'air\'.*"
prio: {id}
  regex".*!KU\(\(f5\(~k.*"
  regex".*!KD\(\(f5\(~k.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(pk\(.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(f1\(~.*"
prio: {id}
  regex".*!KU\(f1\(K.*"


tactic: tactic_4
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*!KU\(~sk_HN.*"
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(f5\(.*" | regex".*!KU\(f5_star\(.*"
prio: {id}
  regex".*!KU\(~sqn_root.*"
prio: {id}
  regex".*!KU\(KDF\(KDF\(<f3\(.*"
prio: {id}
  regex".*=.*=.*=.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*~~>.*"
prio: {id}
  regex".*St_4_SEAF\(.*"
  regex".*St_3_SEAF\(.*"
prio: {id}
  regex".*RcvS\(.*<\'aia\'.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*RcvS\(.*<\'air\'.*"
prio: {id}
  regex".*!KU\(KDF\(<f3\(.*"
prio: {id}
  regex".*!KU\(f3\(.*"
prio: {id}
  regex".*!KU\(~RAND.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*"
prio: {id}
  regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*St_1_SEAF\(.*"
prio: {id}
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(aenc\(.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(~idHN.*"
prio: {id}
  regex".*!KU\(~idSN.*"
prio: {id}
  regex".*RcvS\(.*<\'aca\'.*"
prio: {id}
  regex".*RcvS\(.*<\'ac\'.*"


tactic: tactic_5
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*!KU\(~sk_HN.*"
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(f3\(~k,.*"
  regex".*!KU\(f5\(~k,.*"
prio: {id}
  regex".*St_3_SEAF\(.*"
prio: {id}
  regex".*!KU\(KDF\(KDF\(<f3\(~k,.*"
  regex".*!KU\(KDF\(<f3\(~k,.*~sqn_root.*"
prio: {id}
  regex".*RcvS\(.*\'aia\'.*"
prio: {id}
  regex".*Commit\(.*"
  regex".*CommitConf\(.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*!KU\(SHA256\(.*"
  regex".*!KU\(KDF\(<f3\(~k,.*"


tactic: injectiveagreement_seaf_hss_kseaf_keyConf_noChanRev_noSqnRev_noSupiRev_noAsyKeyRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*!KU\(~sk_HN.*"
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*=.*=.*=.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*!KU\(f2\(~k.*"
  regex".*!KU\(f3\(~k.*"
  regex".*!KU\(f4\(~k.*"
  regex".*!KU\(f5\(~k.*"
prio: {id}
  regex".*St_4_SEAF\(.*"
  regex".*St_3_SEAF\(.*"
prio: {id}
  regex".*RcvS\(.*~idHN,~idSN,.*\'aia\'.*"
prio: {id}
  regex".*CommitConf\(.*"
  regex".*Commit\(.*"
prio: {id}
  regex".*RcvS\(.*~idHN,~idSN,.*"
  regex".*RcvS\(.*~idSN,~idHN,.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(f1\(~.*"
prio: {id}
  regex".*!KU\(f1\(K.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*!KU\(SHA256\(.*"
prio: {id}
  regex".*!KU\(pk\(~sk.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(aenc\(<.*"
prio: {id}
  regex".*!KU\(\(f5\(.*"
prio: {id}
  regex".*!KU\(~sqn_root.*"


tactic: injectiveagreement_seaf_hss_kseaf_noChanRev_noSqnRev_noSupiRev_noAsyKeyRev
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*!KU\(~sk_HN.*"
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*=.*=.*=.*"
prio: {id}
  regex".*St_3_SEAF\(.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*Commit\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*"


tactic: tactic_6
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*!KU\(~sk_HN.*"
  regex".*Sqn_HSS\(.*~sqn_root,~sqn_root.*"
  regex".*Sqn_HSS\(.*,.*,.*,.*,.*~.*"
  regex".*Sqn_UE\(.*,\'1\',.*"
  regex".*Sqn_UE\(.*,~sqn_root,~sqn_root,.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*!KU\(f5\(.*" | regex".*!KU\(f5_star\(.*"
prio: {id}
  regex".*!KU\(~sqn_root.*"
prio: {id}
  regex".*St_1_UE\(.*"
  regex".*St_1_SEAF\(.*"
prio: {id}
  regex".*Sqn_UE\(.*,SqnUE,~sqn_root,count.*"
  regex".*Sqn_UE\(.*,\(\'1\'\+count\),~sqn_root,count\.1.*"
  regex".*Sqn_UE\(.*,\(\'1\'\+x\),~sqn_root,count.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*~~>.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*" | regex".*!KD\(\(f5\(.*"
prio: {id}
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*!KU\(~supi.*"
prio: {id}
  regex".*!KU\(aenc\(.*"


tactic: executability_honest
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*St_2_SEAF\(.*"
  regex".*St_3_SEAF\(.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*Sqn_HSS\(.*"
  regex".*Sqn_UE\(.*"
prio: {id}
  regex".*!KU\(f5_star\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*!KU\(f3\(.*"
prio: {id}
  regex".*!KU\(f5\(~k.*"
prio: {id}
  regex".*!KU\(~sqn_root.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*"
  regex".*!KD\(\(f5\(.*"


tactic: tactic_7
presort: C
prio: {id}
  regex".*!KU\(~k.*"
prio: {id}
  regex".*!HSS\(.*"
prio: {id}
  regex".*=.*=.*"
prio: {id}
  regex".*<.*=.*"
prio: {id}
  regex".*HSS_Resync_End\(.*"
prio: {id}
  regex".*!KU\(f5\(.*" | regex".*!KU\(f5_star\(.*"
  regex".*!KU\(~sqn_root.*"
prio: {id}
  regex".*St_1_UE\(.*"
  regex".*St_1_HSS\(.*"
  regex".*St_2_SEAF\(.*"
  regex".*St_3_SEAF\(.*"
prio: {id}
  regex".*Sqn_UE\(.*"
  regex".*Sqn_HSS\(.*"
prio: {id}
  regex".*~~>.*"
prio: {id}
  regex".*!Ltk_Sym\(.*"
prio: {id}
  regex".*RcvS\(.*"
prio: {id}
  regex".*!KU\(KDF\(.*"
prio: {id}
  regex".*!KU\(f3\(.*"
prio: {id}
  regex".*!KU\(f1_star\(.*"
prio: {id}
  regex".*!KU\(f1\(.*"
prio: {id}
  regex".*!KU\(\(f5\(.*"
  regex".*!KD\(\(f5\(.*"
  regex".*!KU\(\(f5_star\(.*"
  regex".*!KD\(\(f5_star\(.*"





/* looping facts with injective instances: Sqn_HSS/5, Sqn_UE/5 */









rule (modulo E) send_secure:
   [ SndS( A, B, m ) ] --> [ Sec( A, B, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) receive_secure:
   [ Sec( A, B, m ) ] --> [ RcvS( A, B, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) secureChannel_compromised_in:
   [ In( <A, B, x> ) ]
  --[ Rev( A, 'secureChannel' ), Injected( x ) ]->
   [ Sec( A, B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) secureChannel_compromised_out:
   [ Sec( A, B, m ) ] --[ Rev( B, 'secureChannel' ) ]-> [ Out( m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) init_servNet:
   [ Fr( ~idSN ), Fr( ~sk_SN ) ]
  --[ ServNet( ~idSN ) ]->
   [
   !SEAF_0( ~idSN, <'5G', ~idSN>, ~sk_SN, pk(~sk_SN) ),
   !Pk( ~idSN, pk(~sk_SN) ), Out( <~idSN, pk(~sk_SN)> ),
   Out( <'5G', ~idSN> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) init_homeNet:
   [ Fr( ~sk_HN ), Fr( ~idHN ) ]
  --[ HomeNet( ~idHN ) ]->
   [
   !HSS( ~idHN, ~sk_HN ), !Pk( ~idHN, pk(~sk_HN) ),
   Out( <~idHN, pk(~sk_HN)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) add_subscription:
   [ Fr( ~supi ), Fr( ~k ), Fr( ~sqn_root ), !HSS( ~idHN, ~sk_HN ) ]
  --[ Subscribe( ~supi, ~idHN ), Sqn_Create( ~supi, ~idHN, ~sqn_root ) ]->
   [
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root ),
   Sqn_UE( ~supi, ~idHN, ('1'++~sqn_root), ~sqn_root, '1' ),
   Sqn_HSS( ~supi, ~idHN, ('1'++~sqn_root), ~sqn_root, '1' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) add_SN_register:
   [ !SEAF_0( ~idSN, SNID, ~sk_SN, pk(~sk_SN) ), !HSS( ~idHN, ~sk_HN ) ]
  --[ Register( ~idSN, ~idHN ) ]->
   [
   !SEAF( ~idSN, SNID, ~idHN, ~sk_SN, pk(~sk_SN), sign(pk(~sk_SN), ~sk_HN) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_Sym:
   [ !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root ) ]
  --[ Rev( ~supi, <'k', ~k> ), Rev( ~idHN, <'k', ~k> ) ]->
   [ Out( ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_Sqn:
   [ !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root ) ]
  --[ Rev( ~supi, <'sqn', ~sqn_root> ), Rev( ~idHN, <'sqn', ~sqn_root> )
  ]->
   [ Out( ~sqn_root ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_supi:
   [ !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root ) ]
  --[ Rev( ~supi, <'supi', ~supi> ), Rev( ~idHN, <'supi', ~supi> ) ]->
   [ Out( ~supi ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_sk_HN:
   [ !HSS( ~idHN, ~sk_HN ) ]
  --[ Rev( ~idHN, <'skHN', ~sk_HN> ) ]->
   [ Out( ~sk_HN ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ue_sqn_increase:
   [ Sqn_UE( ~supi, ~idHN, Sqn, ~sqn_root, count ), In( m ) ]
  --[
  Sqn_UE_Invariance( ~supi, ~idHN, (Sqn++m), ~sqn_root, (count++m) ),
  Sqn_UE_Change( ~supi, ~idHN, (Sqn++m) ), Sqn_UE_Desync( )
  ]->
   [ Sqn_UE( ~supi, ~idHN, (Sqn++m), ~sqn_root, (count++m) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ue_send_attachReq:
   [
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root ), !Pk( ~idHN, pk_HN ),
   !SEAF( ~idSN, SNID, ~idHN, ~sk_SN, pk(~sk_SN), sig_SN ), Fr( ~R ),
   Fr( ~tid )
   ]
  --[
  Start_UE_Session( ~supi ),
  Running( ~idSN, ~supi, <'UE', 'SEAF', 'PK_SN', pk(~sk_SN)> )
  ]->
   [
   St_1_UE( ~tid, ~supi, ~idHN, ~idSN, ~k, ~sqn_root, pk_HN ),
   Out( <aenc(<~supi, ~R>, pk_HN), ~idHN> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) seaf_receive_attachReq_send_air:
   [
   !SEAF( ~idSN, SNID, idHN, ~sk_SN, pk_SN, sig_SN ), !Pk( ~idSN, pk_SN ),
   Fr( ~tid ), In( <conc_supi, idHN> )
   ]
  --[ Start_SEAF_Session( ~idSN ) ]->
   [
   St_1_SEAF( ~tid, ~idSN, SNID, conc_supi, idHN, ~sk_SN, pk_SN, sig_SN ),
   SndS( ~idSN, idHN, <'air', <conc_supi, idHN>, SNID, pk(~sk_SN), sig_SN> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) hss_receive_air_send_aia:
   [
   !HSS( ~idHN, ~sk_HN ),
   RcvS( idSN, ~idHN,
         <'air', <aenc(<~supi, ~R>, pk(~sk_HN)), ~idHN>, <'5G', idSN>, 
          pk(~sk_SN), sig_SN>
   ),
   !Pk( idSN, pk(~sk_SN) ), !Pk( ~idHN, pk(~sk_HN) ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root ),
   Sqn_HSS( ~supi, ~idHN, SqnHSS, ~sqn_root, count ), Fr( ~RAND ),
   Fr( ~tid ), In( count )
   ]
  --[
  Equality( verify(sig_SN, pk(~sk_SN), pk(~sk_HN)), true ),
  Sqn_HSS_Invariance( ~idHN, ~supi, ('1'++SqnHSS), ~sqn_root, ('1'++count)
  ),
  Src( ~RAND,
       <(f5(~k, ~RAND)⊕('1'++SqnHSS)), f1(~k, <('1'++SqnHSS), ~RAND>)>
  ),
  Start_HSS_Session( ~idHN ), HSS_Send_Aia( ),
  Running( ~idHN, idSN,
           <'SEAF', 'HSS', 'K_seaf', 
            KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                    <<'5G', idSN>, (f5(~k, ~RAND)⊕('1'++SqnHSS))>),
                <'5G', idSN>)
           >
  ),
  Running( ~idHN, idSN, <'SEAF', 'HSS', 'supi', ~supi> ),
  Running( ~idHN, idSN,
           <'SEAF', 'HSS', 'RES_star', 
            KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, f2(~k, ~RAND), ~RAND>)
           >
  ),
  Running( ~idHN, ~supi,
           <'UE', 'HSS', 'K_seaf', 
            KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                    <<'5G', idSN>, (f5(~k, ~RAND)⊕('1'++SqnHSS))>),
                <'5G', idSN>)
           >
  ),
  Running( ~idHN, ~supi, <'UE', 'HSS', 'snname', idSN> ),
  Running( ~idHN, ~supi, <'UE', 'HSS', 'supi', ~supi> ),
  Running( ~idHN, ~supi,
           <'UE', 'HSS', 'AUTN', (f5(~k, ~RAND)⊕('1'++SqnHSS)), 
            f1(~k, <('1'++SqnHSS), ~RAND>)>
  ),
  Honest( ~supi ), Honest( ~idHN ), Honest( idSN )
  ]->
   [
   St_1_HSS( ~tid, ~idHN, ~supi, <aenc(<~supi, ~R>, pk(~sk_HN)), ~idHN>,
             idSN, <'5G', idSN>, ~k, ('1'++SqnHSS),
             KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                 <<'5G', idSN>, f2(~k, ~RAND), ~RAND>),
             ~RAND, ~sqn_root, ~sk_HN
   ),
   Sqn_HSS( ~supi, ~idHN, ('1'++SqnHSS), ~sqn_root, ('1'++count) ),
   SndS( ~idHN, idSN,
         <'aia', ~RAND, 
          SHA256(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                     <<'5G', idSN>, f2(~k, ~RAND), ~RAND>),
                 ~RAND), 
          KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                  <<'5G', idSN>, (f5(~k, ~RAND)⊕('1'++SqnHSS))>),
              <'5G', idSN>), 
          (f5(~k, ~RAND)⊕('1'++SqnHSS)), f1(~k, <('1'++SqnHSS), ~RAND>)>
   )
   ]

  // loop breakers: [1,5]
  /*
  rule (modulo AC) hss_receive_air_send_aia:
     [
     !HSS( ~idHN, ~sk_HN ),
     RcvS( idSN, ~idHN,
           <'air', <aenc(<~supi, ~R>, pk(~sk_HN)), ~idHN>, <'5G', idSN>, 
            pk(~sk_SN), sig_SN>
     ),
     !Pk( idSN, pk(~sk_SN) ), !Pk( ~idHN, pk(~sk_HN) ),
     !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root ),
     Sqn_HSS( ~supi, ~idHN, SqnHSS, ~sqn_root, count ), Fr( ~RAND ),
     Fr( ~tid ), In( count )
     ]
    --[
    Equality( z, true ),
    Sqn_HSS_Invariance( ~idHN, ~supi, ('1'++SqnHSS), ~sqn_root, ('1'++count)
    ),
    Src( ~RAND,
         <(f5(~k, ~RAND)⊕('1'++SqnHSS)), f1(~k, <('1'++SqnHSS), ~RAND>)>
    ),
    Start_HSS_Session( ~idHN ), HSS_Send_Aia( ),
    Running( ~idHN, idSN,
             <'SEAF', 'HSS', 'K_seaf', 
              KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (f5(~k, ~RAND)⊕('1'++SqnHSS))>),
                  <'5G', idSN>)
             >
    ),
    Running( ~idHN, idSN, <'SEAF', 'HSS', 'supi', ~supi> ),
    Running( ~idHN, idSN,
             <'SEAF', 'HSS', 'RES_star', 
              KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, f2(~k, ~RAND), ~RAND>)
             >
    ),
    Running( ~idHN, ~supi,
             <'UE', 'HSS', 'K_seaf', 
              KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (f5(~k, ~RAND)⊕('1'++SqnHSS))>),
                  <'5G', idSN>)
             >
    ),
    Running( ~idHN, ~supi, <'UE', 'HSS', 'snname', idSN> ),
    Running( ~idHN, ~supi, <'UE', 'HSS', 'supi', ~supi> ),
    Running( ~idHN, ~supi,
             <'UE', 'HSS', 'AUTN', (f5(~k, ~RAND)⊕('1'++SqnHSS)), 
              f1(~k, <('1'++SqnHSS), ~RAND>)>
    ),
    Honest( ~supi ), Honest( ~idHN ), Honest( idSN )
    ]->
     [
     St_1_HSS( ~tid, ~idHN, ~supi, <aenc(<~supi, ~R>, pk(~sk_HN)), ~idHN>,
               idSN, <'5G', idSN>, ~k, ('1'++SqnHSS),
               KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                   <<'5G', idSN>, f2(~k, ~RAND), ~RAND>),
               ~RAND, ~sqn_root, ~sk_HN
     ),
     Sqn_HSS( ~supi, ~idHN, ('1'++SqnHSS), ~sqn_root, ('1'++count) ),
     SndS( ~idHN, idSN,
           <'aia', ~RAND, 
            SHA256(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                       <<'5G', idSN>, f2(~k, ~RAND), ~RAND>),
                   ~RAND), 
            KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                    <<'5G', idSN>, (f5(~k, ~RAND)⊕('1'++SqnHSS))>),
                <'5G', idSN>), 
            (f5(~k, ~RAND)⊕('1'++SqnHSS)), f1(~k, <('1'++SqnHSS), ~RAND>)>
     )
     ]
    variants (modulo AC)
    1. ~sk_HN
             = ~sk_HN.22
       ~sk_SN
             = ~sk_SN.23
       sig_SN
             = sign(pk(~sk_SN.23), ~sk_HN.22)
       z     = true
    
    2. ~sk_HN
             = ~sk_HN.29
       ~sk_SN
             = ~sk_SN.30
       sig_SN
             = sig_SN.37
       z     = verify(sig_SN.37, pk(~sk_SN.30), pk(~sk_HN.29))
    // loop breakers: [1,5]
  */

rule (modulo E) seaf_receive_aia_send_authReq:
   [
   St_1_SEAF( ~tid, ~idSN, SNID, conc_supi, idHN, ~sk_SN, pk(~sk_SN), sig_SN
   ),
   !Pk( ~idSN, pk(~sk_SN) ),
   RcvS( idHN, ~idSN, <'aia', RAND, HXRES_star, K_seaf, AUTN> )
   ]
  --[
  Out_Src( RAND, AUTN ),
  Running( ~idSN, idHN, <'HSS', 'SEAF', 'K_seaf', K_seaf> )
  ]->
   [
   St_2_SEAF( ~tid, ~idSN, SNID, conc_supi, idHN, RAND, HXRES_star, K_seaf,
              ~sk_SN, pk(~sk_SN), sig_SN
   ),
   Out( <RAND, AUTN, SNID, pk(~sk_SN), sig_SN> )
   ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

rule (modulo E) ue_receive_authReq_freshness_success_send_authResp:
   [
   St_1_UE( ~tid, ~supi, ~idHN, idSN, ~k, ~sqn_root, pk_HN ),
   !Pk( idSN, pk(~sk_SN) ), !Pk( ~idHN, pk(~sk_HN) ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
   In( <RAND, <(f5(~k, RAND)⊕(SqnUE++dif)), f1(~k, <(SqnUE++dif), RAND>)>, 
        <'5G', idSN>, pk(~sk_SN), sig_SN>
   ),
   In( additional_SN_verify )
   ]
  --[
  Equality( verify(sig_SN, pk(~sk_SN), pk(~sk_HN)), true ),
  Sqn_UE_Invariance( ~supi, ~idHN, (SqnUE++dif), ~sqn_root, (count++dif) ),
  Sqn_UE_Change( ~supi, ~idHN, (SqnUE++dif) ),
  Sqn_UE_Use( ~supi, ~idHN, (SqnUE++dif) ),
  Commit( ~supi, idSN, <'UE', 'SEAF', 'PK_SN', pk(~sk_SN)> ),
  Running( ~supi, idSN,
           <'SEAF', 'UE', 'RES_star', 
            KDF(<f3(~k, RAND), f4(~k, RAND)>, <<'5G', idSN>, f2(~k, RAND), RAND>)>
  ),
  Running( ~supi, idSN,
           <'SEAF', 'UE', 'K_seaf', 
            KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                    <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
                <'5G', idSN>)
           >
  ),
  Running( ~supi, idSN, <'SEAF', 'UE', 'supi', ~supi> ),
  Running( ~supi, ~idHN,
           <'HSS', 'UE', 'K_seaf', 
            KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                    <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
                <'5G', idSN>)
           >
  ),
  Running( ~supi, ~idHN, <'HSS', 'UE', 'snname', idSN> ),
  Running( ~supi, ~idHN, <'HSS', 'UE', 'supi', ~supi> ),
  Running( ~supi, ~idHN, <'HSS', 'UE', 'RAND', RAND> ),
  Secret( <'UE', ~supi>, 'key',
          KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                  <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
              <'5G', idSN>)
  ),
  Secret( <'UE', ~supi>, 'supi', ~supi ), Secret( <'UE', ~supi>, 'k', ~k ),
  Commit( ~supi, ~idHN,
          <'UE', 'HSS', 'AUTN', (f5(~k, RAND)⊕(SqnUE++dif)), 
           f1(~k, <(SqnUE++dif), RAND>)>
  ),
  Commit( ~supi, ~idHN, <'UE', 'HSS', 'supi', ~supi> ),
  Commit( ~supi, ~idHN, <'UE', 'HSS', 'snname', idSN> ),
  Commit( ~supi, ~idHN,
          <'UE', 'HSS', 'K_seaf', 
           KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                   <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
               <'5G', idSN>)
          >
  ),
  Commit( ~supi, idSN,
          <'UE', 'SEAF', 'K_seaf', 
           KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                   <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
               <'5G', idSN>)
          >
  ),
  Commit( ~supi, idSN, <'UE', 'SEAF', 'RAND', RAND> ), Honest( ~supi ),
  Honest( ~idHN ), Honest( idSN )
  ]->
   [
   St_2_UE( ~tid, ~supi, ~idHN, idSN, ~k, ~sqn_root, idSN,
            KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                    <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
                <'5G', idSN>),
            pk_HN
   ),
   Out( KDF(<f3(~k, RAND), f4(~k, RAND)>,
            <<'5G', idSN>, f2(~k, RAND), RAND>)
   ),
   Sqn_UE( ~supi, ~idHN, (SqnUE++dif), ~sqn_root, (count++dif) )
   ]

  // loop breaker: [3]
  /*
  rule (modulo AC) ue_receive_authReq_freshness_success_send_authResp:
     [
     St_1_UE( ~tid, ~supi, ~idHN, idSN, ~k, ~sqn_root, pk_HN ),
     !Pk( idSN, pk(~sk_SN) ), !Pk( ~idHN, pk(~sk_HN) ),
     Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
     In( <RAND, <(f5(~k, RAND)⊕(SqnUE++dif)), f1(~k, <(SqnUE++dif), RAND>)>, 
          <'5G', idSN>, pk(~sk_SN), sig_SN>
     ),
     In( additional_SN_verify )
     ]
    --[
    Equality( z, true ),
    Sqn_UE_Invariance( ~supi, ~idHN, (SqnUE++dif), ~sqn_root, (count++dif) ),
    Sqn_UE_Change( ~supi, ~idHN, (SqnUE++dif) ),
    Sqn_UE_Use( ~supi, ~idHN, (SqnUE++dif) ),
    Commit( ~supi, idSN, <'UE', 'SEAF', 'PK_SN', pk(~sk_SN)> ),
    Running( ~supi, idSN,
             <'SEAF', 'UE', 'RES_star', 
              KDF(<f3(~k, RAND), f4(~k, RAND)>, <<'5G', idSN>, f2(~k, RAND), RAND>)>
    ),
    Running( ~supi, idSN,
             <'SEAF', 'UE', 'K_seaf', 
              KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                      <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
                  <'5G', idSN>)
             >
    ),
    Running( ~supi, idSN, <'SEAF', 'UE', 'supi', ~supi> ),
    Running( ~supi, ~idHN,
             <'HSS', 'UE', 'K_seaf', 
              KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                      <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
                  <'5G', idSN>)
             >
    ),
    Running( ~supi, ~idHN, <'HSS', 'UE', 'snname', idSN> ),
    Running( ~supi, ~idHN, <'HSS', 'UE', 'supi', ~supi> ),
    Running( ~supi, ~idHN, <'HSS', 'UE', 'RAND', RAND> ),
    Secret( <'UE', ~supi>, 'key',
            KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                    <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
                <'5G', idSN>)
    ),
    Secret( <'UE', ~supi>, 'supi', ~supi ), Secret( <'UE', ~supi>, 'k', ~k ),
    Commit( ~supi, ~idHN,
            <'UE', 'HSS', 'AUTN', (f5(~k, RAND)⊕(SqnUE++dif)), 
             f1(~k, <(SqnUE++dif), RAND>)>
    ),
    Commit( ~supi, ~idHN, <'UE', 'HSS', 'supi', ~supi> ),
    Commit( ~supi, ~idHN, <'UE', 'HSS', 'snname', idSN> ),
    Commit( ~supi, ~idHN,
            <'UE', 'HSS', 'K_seaf', 
             KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                     <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
                 <'5G', idSN>)
            >
    ),
    Commit( ~supi, idSN,
            <'UE', 'SEAF', 'K_seaf', 
             KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                     <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
                 <'5G', idSN>)
            >
    ),
    Commit( ~supi, idSN, <'UE', 'SEAF', 'RAND', RAND> ), Honest( ~supi ),
    Honest( ~idHN ), Honest( idSN )
    ]->
     [
     St_2_UE( ~tid, ~supi, ~idHN, idSN, ~k, ~sqn_root, idSN,
              KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                      <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE++dif))>),
                  <'5G', idSN>),
              pk_HN
     ),
     Out( KDF(<f3(~k, RAND), f4(~k, RAND)>,
              <<'5G', idSN>, f2(~k, RAND), RAND>)
     ),
     Sqn_UE( ~supi, ~idHN, (SqnUE++dif), ~sqn_root, (count++dif) )
     ]
    variants (modulo AC)
    1. ~sk_HN
             = ~sk_HN.21
       ~sk_SN
             = ~sk_SN.22
       sig_SN
             = sign(pk(~sk_SN.22), ~sk_HN.21)
       z     = true
    
    2. ~sk_HN
             = ~sk_HN.32
       ~sk_SN
             = ~sk_SN.33
       sig_SN
             = sig_SN.44
       z     = verify(sig_SN.44, pk(~sk_SN.33), pk(~sk_HN.32))
    // loop breaker: [3]
  */

rule (modulo E) ue_receive_authReq_fail_freshness_send_sync_failure:
   [
   St_1_UE( ~tid, ~supi, ~idHN, idSN, ~k, ~sqn_root, pk_HN ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
   In( <RAND, <(SqnHSS⊕f5(~k, RAND)), f1(~k, <SqnHSS, RAND>)>, 
        <'5G', idSN>, sig_SN>
   ),
   In( count ), !Pk( idSN, pk(~sk_SN) ), !Pk( ~idHN, pk(~sk_HN) )
   ]
  --[
  Equality( verify(sig_SN, pk(~sk_SN), pk(~sk_HN)), true ),
  Greater_Or_Equal_Than( SqnUE, SqnHSS ),
  Sqn_UE_Invariance( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
  Sqn_UE_Nochange( ~supi, ~idHN, SqnUE )
  ]->
   [
   Out( <(SqnUE⊕f5_star(~k, RAND)), f1_star(~k, <SqnUE, RAND>)> ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) ue_receive_authReq_fail_freshness_send_sync_failure:
     [
     St_1_UE( ~tid, ~supi, ~idHN, idSN, ~k, ~sqn_root, pk_HN ),
     Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
     In( <RAND, <z, f1(~k, <SqnHSS, RAND>)>, <'5G', idSN>, sig_SN> ),
     In( count ), !Pk( idSN, pk(~sk_SN) ), !Pk( ~idHN, pk(~sk_HN) )
     ]
    --[
    Equality( z.2, true ), Greater_Or_Equal_Than( SqnUE, SqnHSS ),
    Sqn_UE_Invariance( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
    Sqn_UE_Nochange( ~supi, ~idHN, SqnUE )
    ]->
     [
     Out( <z.1, f1_star(~k, <SqnUE, RAND>)> ),
     Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count )
     ]
    variants (modulo AC)
     1. ~k    = ~k.20
        ~sk_HN
              = ~sk_HN.21
        ~sk_SN
              = ~sk_SN.22
        RAND  = RAND.26
        SqnHSS
              = SqnHSS.27
        SqnUE = SqnUE.28
        sig_SN
              = sig_SN.32
        z     = (SqnHSS.27⊕f5(~k.20, RAND.26))
        z.1   = (SqnUE.28⊕f5_star(~k.20, RAND.26))
        z.2   = verify(sig_SN.32, pk(~sk_SN.22), pk(~sk_HN.21))
    
     2. ~k    = ~k.20
        ~sk_HN
              = ~sk_HN.21
        ~sk_SN
              = ~sk_SN.22
        RAND  = RAND.26
        SqnHSS
              = SqnHSS.27
        SqnUE = zero
        sig_SN
              = sig_SN.32
        z     = (SqnHSS.27⊕f5(~k.20, RAND.26))
        z.1   = f5_star(~k.20, RAND.26)
        z.2   = verify(sig_SN.32, pk(~sk_SN.22), pk(~sk_HN.21))
    
     3. ~k    = ~k.20
        ~sk_HN
              = ~sk_HN.21
        ~sk_SN
              = ~sk_SN.22
        RAND  = RAND.26
        SqnHSS
              = zero
        SqnUE = SqnUE.28
        sig_SN
              = sig_SN.32
        z     = f5(~k.20, RAND.26)
        z.1   = (SqnUE.28⊕f5_star(~k.20, RAND.26))
        z.2   = verify(sig_SN.32, pk(~sk_SN.22), pk(~sk_HN.21))
    
     4. ~k    = ~k.20
        ~sk_HN
              = ~sk_HN.21
        ~sk_SN
              = ~sk_SN.22
        RAND  = RAND.26
        SqnHSS
              = zero
        SqnUE = zero
        sig_SN
              = sig_SN.32
        z     = f5(~k.20, RAND.26)
        z.1   = f5_star(~k.20, RAND.26)
        z.2   = verify(sig_SN.32, pk(~sk_SN.22), pk(~sk_HN.21))
    
     5. ~k    = ~k.22
        ~sk_HN
              = ~sk_HN.23
        ~sk_SN
              = ~sk_SN.24
        RAND  = RAND.28
        SqnHSS
              = SqnHSS.29
        SqnUE = SqnUE.30
        sig_SN
              = sign(pk(~sk_SN.24), ~sk_HN.23)
        z     = (SqnHSS.29⊕f5(~k.22, RAND.28))
        z.1   = (SqnUE.30⊕f5_star(~k.22, RAND.28))
        z.2   = true
    
     6. ~k    = ~k.22
        ~sk_HN
              = ~sk_HN.23
        ~sk_SN
              = ~sk_SN.24
        RAND  = RAND.28
        SqnHSS
              = SqnHSS.29
        SqnUE = zero
        sig_SN
              = sign(pk(~sk_SN.24), ~sk_HN.23)
        z     = (SqnHSS.29⊕f5(~k.22, RAND.28))
        z.1   = f5_star(~k.22, RAND.28)
        z.2   = true
    
     7. ~k    = ~k.22
        ~sk_HN
              = ~sk_HN.23
        ~sk_SN
              = ~sk_SN.24
        RAND  = RAND.28
        SqnHSS
              = zero
        SqnUE = SqnUE.30
        sig_SN
              = sign(pk(~sk_SN.24), ~sk_HN.23)
        z     = f5(~k.22, RAND.28)
        z.1   = (SqnUE.30⊕f5_star(~k.22, RAND.28))
        z.2   = true
    
     8. ~k    = ~k.22
        ~sk_HN
              = ~sk_HN.23
        ~sk_SN
              = ~sk_SN.24
        RAND  = RAND.28
        SqnHSS
              = zero
        SqnUE = zero
        sig_SN
              = sign(pk(~sk_SN.24), ~sk_HN.23)
        z     = f5(~k.22, RAND.28)
        z.1   = f5_star(~k.22, RAND.28)
        z.2   = true
    
     9. ~k    = ~k.26
        ~sk_HN
              = ~sk_HN.27
        ~sk_SN
              = ~sk_SN.28
        RAND  = RAND.32
        SqnHSS
              = f5(~k.26, RAND.32)
        SqnUE = f5_star(~k.26, RAND.32)
        sig_SN
              = sign(pk(~sk_SN.28), ~sk_HN.27)
        z     = zero
        z.1   = zero
        z.2   = true
    
    10. ~k    = ~k.26
        ~sk_HN
              = ~sk_HN.27
        ~sk_SN
              = ~sk_SN.28
        RAND  = RAND.32
        SqnHSS
              = f5(~k.26, RAND.32)
        SqnUE = zero
        sig_SN
              = sign(pk(~sk_SN.28), ~sk_HN.27)
        z     = zero
        z.1   = f5_star(~k.26, RAND.32)
        z.2   = true
    
    11. ~k    = ~k.26
        ~sk_HN
              = ~sk_HN.27
        ~sk_SN
              = ~sk_SN.28
        RAND  = RAND.32
        SqnHSS
              = zero
        SqnUE = f5_star(~k.26, RAND.32)
        sig_SN
              = sign(pk(~sk_SN.28), ~sk_HN.27)
        z     = f5(~k.26, RAND.32)
        z.1   = zero
        z.2   = true
    
    12. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = SqnHSS.34
        SqnUE = f5_star(~k.27, RAND.33)
        sig_SN
              = sig_SN.39
        z     = (SqnHSS.34⊕f5(~k.27, RAND.33))
        z.1   = zero
        z.2   = verify(sig_SN.39, pk(~sk_SN.29), pk(~sk_HN.28))
    
    13. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = SqnHSS.34
        SqnUE = f5_star(~k.27, RAND.33)
        sig_SN
              = sign(pk(~sk_SN.29), ~sk_HN.28)
        z     = (SqnHSS.34⊕f5(~k.27, RAND.33))
        z.1   = zero
        z.2   = true
    
    14. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = f5(~k.27, RAND.33)
        SqnUE = SqnUE.35
        sig_SN
              = sig_SN.39
        z     = zero
        z.1   = (SqnUE.35⊕f5_star(~k.27, RAND.33))
        z.2   = verify(sig_SN.39, pk(~sk_SN.29), pk(~sk_HN.28))
    
    15. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = f5(~k.27, RAND.33)
        SqnUE = SqnUE.35
        sig_SN
              = sign(pk(~sk_SN.29), ~sk_HN.28)
        z     = zero
        z.1   = (SqnUE.35⊕f5_star(~k.27, RAND.33))
        z.2   = true
    
    16. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = f5(~k.27, RAND.33)
        SqnUE = f5_star(~k.27, RAND.33)
        sig_SN
              = sig_SN.39
        z     = zero
        z.1   = zero
        z.2   = verify(sig_SN.39, pk(~sk_SN.29), pk(~sk_HN.28))
    
    17. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = f5(~k.27, RAND.33)
        SqnUE = zero
        sig_SN
              = sig_SN.39
        z     = zero
        z.1   = f5_star(~k.27, RAND.33)
        z.2   = verify(sig_SN.39, pk(~sk_SN.29), pk(~sk_HN.28))
    
    18. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = f5(~k.27, RAND.33)
        SqnUE = (z.42⊕f5_star(~k.27, RAND.33))
        sig_SN
              = sign(pk(~sk_SN.29), ~sk_HN.28)
        z     = zero
        z.1   = z.42
        z.2   = true
    
    19. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = zero
        SqnUE = f5_star(~k.27, RAND.33)
        sig_SN
              = sig_SN.39
        z     = f5(~k.27, RAND.33)
        z.1   = zero
        z.2   = verify(sig_SN.39, pk(~sk_SN.29), pk(~sk_HN.28))
    
    20. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = zero
        SqnUE = (z.42⊕f5_star(~k.27, RAND.33))
        sig_SN
              = sign(pk(~sk_SN.29), ~sk_HN.28)
        z     = f5(~k.27, RAND.33)
        z.1   = z.42
        z.2   = true
    
    21. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = (z.40⊕f5(~k.27, RAND.33))
        SqnUE = f5_star(~k.27, RAND.33)
        sig_SN
              = sign(pk(~sk_SN.29), ~sk_HN.28)
        z     = z.40
        z.1   = zero
        z.2   = true
    
    22. ~k    = ~k.27
        ~sk_HN
              = ~sk_HN.28
        ~sk_SN
              = ~sk_SN.29
        RAND  = RAND.33
        SqnHSS
              = (z.40⊕f5(~k.27, RAND.33))
        SqnUE = zero
        sig_SN
              = sign(pk(~sk_SN.29), ~sk_HN.28)
        z     = z.40
        z.1   = f5_star(~k.27, RAND.33)
        z.2   = true
    
    23. ~k    = ~k.28
        ~sk_HN
              = ~sk_HN.29
        ~sk_SN
              = ~sk_SN.30
        RAND  = RAND.34
        SqnHSS
              = f5(~k.28, RAND.34)
        SqnUE = (z.43⊕f5_star(~k.28, RAND.34))
        sig_SN
              = sig_SN.40
        z     = zero
        z.1   = z.43
        z.2   = verify(sig_SN.40, pk(~sk_SN.30), pk(~sk_HN.29))
    
    24. ~k    = ~k.28
        ~sk_HN
              = ~sk_HN.29
        ~sk_SN
              = ~sk_SN.30
        RAND  = RAND.34
        SqnHSS
              = zero
        SqnUE = (z.43⊕f5_star(~k.28, RAND.34))
        sig_SN
              = sig_SN.40
        z     = f5(~k.28, RAND.34)
        z.1   = z.43
        z.2   = verify(sig_SN.40, pk(~sk_SN.30), pk(~sk_HN.29))
    
    25. ~k    = ~k.28
        ~sk_HN
              = ~sk_HN.29
        ~sk_SN
              = ~sk_SN.30
        RAND  = RAND.34
        SqnHSS
              = (z.41⊕f5(~k.28, RAND.34))
        SqnUE = SqnUE.36
        sig_SN
              = sig_SN.40
        z     = z.41
        z.1   = (SqnUE.36⊕f5_star(~k.28, RAND.34))
        z.2   = verify(sig_SN.40, pk(~sk_SN.30), pk(~sk_HN.29))
    
    26. ~k    = ~k.28
        ~sk_HN
              = ~sk_HN.29
        ~sk_SN
              = ~sk_SN.30
        RAND  = RAND.34
        SqnHSS
              = (z.41⊕f5(~k.28, RAND.34))
        SqnUE = SqnUE.36
        sig_SN
              = sign(pk(~sk_SN.30), ~sk_HN.29)
        z     = z.41
        z.1   = (SqnUE.36⊕f5_star(~k.28, RAND.34))
        z.2   = true
    
    27. ~k    = ~k.28
        ~sk_HN
              = ~sk_HN.29
        ~sk_SN
              = ~sk_SN.30
        RAND  = RAND.34
        SqnHSS
              = (z.41⊕f5(~k.28, RAND.34))
        SqnUE = f5_star(~k.28, RAND.34)
        sig_SN
              = sig_SN.40
        z     = z.41
        z.1   = zero
        z.2   = verify(sig_SN.40, pk(~sk_SN.30), pk(~sk_HN.29))
    
    28. ~k    = ~k.28
        ~sk_HN
              = ~sk_HN.29
        ~sk_SN
              = ~sk_SN.30
        RAND  = RAND.34
        SqnHSS
              = (z.41⊕f5(~k.28, RAND.34))
        SqnUE = zero
        sig_SN
              = sig_SN.40
        z     = z.41
        z.1   = f5_star(~k.28, RAND.34)
        z.2   = verify(sig_SN.40, pk(~sk_SN.30), pk(~sk_HN.29))
    
    29. ~k    = ~k.28
        ~sk_HN
              = ~sk_HN.29
        ~sk_SN
              = ~sk_SN.30
        RAND  = RAND.34
        SqnHSS
              = (z.41⊕f5(~k.28, RAND.34))
        SqnUE = (z.43⊕f5_star(~k.28, RAND.34))
        sig_SN
              = sign(pk(~sk_SN.30), ~sk_HN.29)
        z     = z.41
        z.1   = z.43
        z.2   = true
    
    30. ~k    = ~k.29
        ~sk_HN
              = ~sk_HN.30
        ~sk_SN
              = ~sk_SN.31
        RAND  = RAND.35
        SqnHSS
              = SqnHSS.36
        SqnUE = (z.44⊕f5_star(~k.29, RAND.35))
        sig_SN
              = sig_SN.41
        z     = (SqnHSS.36⊕f5(~k.29, RAND.35))
        z.1   = z.44
        z.2   = verify(sig_SN.41, pk(~sk_SN.31), pk(~sk_HN.30))
    
    31. ~k    = ~k.29
        ~sk_HN
              = ~sk_HN.30
        ~sk_SN
              = ~sk_SN.31
        RAND  = RAND.35
        SqnHSS
              = SqnHSS.36
        SqnUE = (z.44⊕f5_star(~k.29, RAND.35))
        sig_SN
              = sign(pk(~sk_SN.31), ~sk_HN.30)
        z     = (SqnHSS.36⊕f5(~k.29, RAND.35))
        z.1   = z.44
        z.2   = true
    
    32. ~k    = ~k.29
        ~sk_HN
              = ~sk_HN.30
        ~sk_SN
              = ~sk_SN.31
        RAND  = RAND.35
        SqnHSS
              = (z.42⊕f5(~k.29, RAND.35))
        SqnUE = (z.44⊕f5_star(~k.29, RAND.35))
        sig_SN
              = sig_SN.41
        z     = z.42
        z.1   = z.44
        z.2   = verify(sig_SN.41, pk(~sk_SN.31), pk(~sk_HN.30))
    // loop breaker: [1]
  */

rule (modulo E) seaf_receive_authResp_send_ac:
   [
   St_2_SEAF( ~tid, ~idSN, SNID, conc_supi, idHN, RAND,
              SHA256(RES_star, RAND), K_seaf, ~sk_SN, pk(~sk_SN), sig_SN
   ),
   In( RES_star )
   ]
  --[ Running( ~idSN, idHN, <'HSS', 'SEAF', 'RES_star', RES_star> ) ]->
   [
   St_3_SEAF( ~tid, ~idSN, SNID, conc_supi, idHN, RAND, RES_star, K_seaf,
              ~sk_SN, pk(~sk_SN), sig_SN
   ),
   SndS( ~idSN, idHN, <'ac', RES_star, <conc_supi, idHN>, SNID> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) seaf_receive_syncFailure_send_authSync:
   [
   St_2_SEAF( ~tid, ~idSN, SNID, conc_supi, idHN, RAND, HXRES_star, K_seaf,
              ~sk_SN, pk(~sk_SN), sig_SN
   ),
   In( <SqnUEXorAKS, MACS> )
   ]
  -->
   [ SndS( ~idSN, idHN, <'resync', RAND, SqnUEXorAKS, MACS> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) hss_receive_ac_send_aca:
   [
   St_1_HSS( ~tid, ~idHN, ~supi, suci, idSN, <'5G', idSN>, ~k, Sqn,
             XRES_star, ~RAND, ~sqn_root, ~sk_HN
   ),
   RcvS( idSN, ~idHN, <'ac', XRES_star, suci, '5G', idSN> )
   ]
  --[
  HSS_End( ),
  Secret( <'HSS', ~idHN>, 'key',
          KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                  <<'5G', idSN>, (Sqn⊕f5(~k, ~RAND))>),
              <'5G', idSN>)
  ),
  Secret( <'HSS', ~idHN>, 'supi', ~supi ),
  Secret( <'HSS', ~idHN>, 'k', ~k ),
  Commit( ~idHN, idSN,
          <'HSS', 'SEAF', 'K_seaf', 
           KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                   <<'5G', idSN>, (Sqn⊕f5(~k, ~RAND))>),
               <'5G', idSN>)
          >
  ),
  Commit( ~idHN, idSN, <'HSS', 'SEAF', 'supi', ~supi> ),
  Commit( ~idHN, idSN, <'HSS', 'SEAF', 'RES_star', XRES_star> ),
  Commit( ~idHN, ~supi,
          <'HSS', 'UE', 'K_seaf', 
           KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                   <<'5G', idSN>, (Sqn⊕f5(~k, ~RAND))>),
               <'5G', idSN>)
          >
  ),
  Commit( ~idHN, ~supi, <'HSS', 'UE', 'snname', idSN> ),
  Commit( ~idHN, ~supi, <'HSS', 'UE', 'supi', ~supi> ),
  Commit( ~idHN, ~supi, <'HSS', 'UE', 'RAND', ~RAND> ), Honest( ~idHN ),
  Honest( ~supi ), Honest( idSN )
  ]->
   [ SndS( ~idHN, idSN, <'aca', 'confirm', ~supi> ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) hss_receive_ac_send_aca:
     [
     St_1_HSS( ~tid, ~idHN, ~supi, suci, idSN, <'5G', idSN>, ~k, Sqn,
               XRES_star, ~RAND, ~sqn_root, ~sk_HN
     ),
     RcvS( idSN, ~idHN, <'ac', XRES_star, suci, '5G', idSN> )
     ]
    --[
    HSS_End( ),
    Secret( <'HSS', ~idHN>, 'key',
            KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>), <'5G', idSN>)
    ),
    Secret( <'HSS', ~idHN>, 'supi', ~supi ),
    Secret( <'HSS', ~idHN>, 'k', ~k ),
    Commit( ~idHN, idSN,
            <'HSS', 'SEAF', 'K_seaf', 
             KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>), <'5G', idSN>)
            >
    ),
    Commit( ~idHN, idSN, <'HSS', 'SEAF', 'supi', ~supi> ),
    Commit( ~idHN, idSN, <'HSS', 'SEAF', 'RES_star', XRES_star> ),
    Commit( ~idHN, ~supi,
            <'HSS', 'UE', 'K_seaf', 
             KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>), <'5G', idSN>)
            >
    ),
    Commit( ~idHN, ~supi, <'HSS', 'UE', 'snname', idSN> ),
    Commit( ~idHN, ~supi, <'HSS', 'UE', 'supi', ~supi> ),
    Commit( ~idHN, ~supi, <'HSS', 'UE', 'RAND', ~RAND> ), Honest( ~idHN ),
    Honest( ~supi ), Honest( idSN )
    ]->
     [ SndS( ~idHN, idSN, <'aca', 'confirm', ~supi> ) ]
    variants (modulo AC)
    1. ~RAND = ~RAND.22
       ~k    = ~k.24
       Sqn   = f5(~k.24, ~RAND.22)
       z     = zero
    
    2. ~RAND = ~RAND.22
       ~k    = ~k.24
       Sqn   = zero
       z     = f5(~k.24, ~RAND.22)
    
    3. ~RAND = ~RAND.27
       ~k    = ~k.29
       Sqn   = Sqn.34
       z     = (Sqn.34⊕f5(~k.29, ~RAND.27))
    
    4. ~RAND = ~RAND.37
       ~k    = ~k.39
       Sqn   = (z.54⊕f5(~k.39, ~RAND.37))
       z     = z.54
    // loop breaker: [1]
  */

rule (modulo E) seaf_receive_aca:
   [
   St_3_SEAF( ~tid, ~idSN, <'5G', ~idSN>, conc_supi, idHN, ~RAND, RES_star,
              K_seaf, ~sk_SN, pk(~sk_SN), sig_SN
   ),
   RcvS( idHN, ~idSN, <'aca', 'confirm', supi> )
   ]
  --[
  SEAF_End( ), Running( ~idSN, supi, <'UE', 'SEAF', 'K_seaf', K_seaf> ),
  Running( ~idSN, idHN, <'HSS', 'SEAF', 'supi', supi> ),
  Secret( <'SEAF', ~idSN>, 'key', K_seaf ),
  Secret( <'SEAF', ~idSN>, 'supi', supi ),
  Commit( ~idSN, idHN, <'SEAF', 'HSS', 'K_seaf', K_seaf> ),
  Commit( ~idSN, idHN, <'SEAF', 'HSS', 'supi', supi> ),
  Commit( ~idSN, idHN, <'SEAF', 'HSS', 'RES_star', RES_star> ),
  Commit( ~idSN, supi, <'SEAF', 'UE', 'K_seaf', K_seaf> ),
  Commit( ~idSN, supi, <'SEAF', 'UE', 'supi', supi> ),
  Commit( ~idSN, supi, <'SEAF', 'UE', 'RES_star', RES_star> ),
  Honest( supi ), Honest( idHN ), Honest( ~idSN )
  ]->
   [
   St_4_SEAF( ~tid, ~idSN, <'5G', ~idSN>, conc_supi, idHN, ~RAND, RES_star,
              K_seaf, supi, ~sk_SN, pk(~sk_SN), sig_SN
   ),
   Out( f1(K_seaf, 'SEAF') )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) hss_receive_authSync:
   [
   St_1_HSS( ~tid, ~idHN, ~supi, suci, idSN, SNID, ~k, SqnHSS, XRES_star,
             ~RAND, ~sqn_root, ~sk_HN
   ),
   Sqn_HSS( ~supi, ~idHN, SqnHSS, ~sqn_root, count ),
   RcvS( idSN, ~idHN,
         <'resync', ~RAND, (f5_star(~k, ~RAND)⊕(SqnHSS++dif)), 
          f1_star(~k, <(SqnHSS++dif), ~RAND>)>
   ),
   In( (count++dif) )
   ]
  --[
  Sqn_HSS_Invariance( ~idHN, ~supi, (SqnHSS++dif), ~sqn_root, (count++dif)
  ),
  HSS_Resync_End( (count++dif) )
  ]->
   [ Sqn_HSS( ~supi, ~idHN, (SqnHSS++dif), ~sqn_root, (count++dif) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) ue_key_confirmation:
   [
   St_2_UE( ~tid, ~supi, ~idHN, idSN, ~k, ~sqn_root, idSN, K_seaf, pk_HN ),
   In( f1(K_seaf, 'SEAF') )
   ]
  --[
  CommitConf( ~supi, ~idHN, <'UE', 'HSS', 'K_seaf', K_seaf> ),
  CommitConf( ~supi, ~idHN, <'UE', 'HSS', 'snname', idSN> ),
  CommitConf( ~supi, ~idHN, <'UE', 'HSS', 'supi', ~supi> ),
  CommitConf( ~supi, idSN, <'UE', 'SEAF', 'K_seaf', K_seaf> ),
  SecretConf( <'UE', ~supi>, 'supi', ~supi ), Honest( ~supi ),
  Honest( ~idHN ), Honest( idSN )
  ]->
   [ Out( f1(K_seaf, 'UE') ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) seaf_key_confirmation_check:
   [
   St_4_SEAF( ~tid, ~idSN, SNID, conc_supi, idHN, ~RAND, RES_star, K_seaf,
              supi, ~sk_SN, pk(~sk_SN), sig_SN
   ),
   In( f1(K_seaf, 'UE') )
   ]
  --[
  CommitConf( ~idSN, idHN, <'SEAF', 'HSS', 'K_seaf', K_seaf> ),
  CommitConf( ~idSN, idHN, <'SEAF', 'HSS', 'supi', supi> ),
  CommitConf( ~idSN, supi, <'SEAF', 'UE', 'K_seaf', K_seaf> ),
  CommitConf( ~idSN, supi, <'SEAF', 'UE', 'supi', supi> ), Honest( supi ),
  Honest( idHN ), Honest( ~idSN ), SEAF_EndConf( )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction subscribe_once:
  "∀ HN1 HN2 supi #i #j.
    ((Subscribe( supi, HN1 ) @ #i) ∧ (Subscribe( supi, HN2 ) @ #j)) ⇒
    ((#i = #j) ∧ (HN1 = HN2))"
  // safety formula

restriction register_once:
  "∀ HN1 HN2 SN #i #j.
    ((Register( SN, HN1 ) @ #i) ∧ (Register( SN, HN2 ) @ #j)) ⇒
    ((#i = #j) ∧ (HN1 = HN2))"
  // safety formula

restriction greater_or_equal_than:
  "∀ x y #i. (Greater_Or_Equal_Than( x, y ) @ #i) ⇒ (¬(∃ z. (x++z) = y))"
  // safety formula

restriction equality:
  "∀ x y #i. (Equality( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

lemma dummy:
  all-traces "¬(⊥)"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by sorry

lemma rand_autn_src [sources]:
  all-traces
  "∀ RAND AUTN #i.
    (Out_Src( RAND, AUTN ) @ #i) ⇒
    ((∃ #j. (Src( RAND, AUTN ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j x1 x2.
       (Injected( <'aia', RAND, x1, x2, AUTN> ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ RAND AUTN #i.
  (Out_Src( RAND, AUTN ) @ #i)
 ∧
  (∀ #j. (Src( RAND, AUTN ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j x1 x2.
    (Injected( <'aia', RAND, x1, x2, AUTN> ) @ #j) ⇒ ¬(#j < #i))"
*/
by sorry

lemma sqn_ue_invariance [heuristic={sqn_many}, use_induction, sources]:
  all-traces
  "∀ supi HN Sqn sqn_root count #i.
    (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i) ⇒
    ((count++sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn sqn_root count #i.
  (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count++sqn_root) = Sqn)"
*/
by sorry

lemma sqn_hss_invariance [heuristic={sqn_many}, use_induction, sources]:
  all-traces
  "∀ HN supi Sqn sqn_root count #i.
    (Sqn_HSS_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i) ⇒
    ((count++sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ HN supi Sqn sqn_root count #i.
  (Sqn_HSS_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count++sqn_root) = Sqn)"
*/
by sorry

lemma sqn_ue_src [heuristic={sqn_many}, use_induction, reuse]:
  all-traces
  "∀ supi HN Sqn sqn_root count #i.
    (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i) ⇒
    (∃ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn sqn_root count #i.
  (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i)
 ∧
  ∀ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma sqn_hss_src [heuristic={sqn_many}, reuse]:
  all-traces
  "∀ HN supi Sqn sqn_root count #i.
    (Sqn_HSS_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i) ⇒
    (∃ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ HN supi Sqn sqn_root count #i.
  (Sqn_HSS_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ∀ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma sqn_ue_nodecrease [use_induction, reuse,
                         heuristic={sqn_ue_nodecrease}]:
  all-traces
  "(((∀ supi HN Sqni Sqnj #i #j.
       (((Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
         (Sqn_UE_Change( supi, HN, Sqni ) @ #i)) ∧
        (#i < #j)) ⇒
       (∃ dif. Sqnj = (Sqni++dif))) ∧
     (∀ supi HN Sqni Sqnj #i #j.
       (((Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
         (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)) ∧
        (#i < #j)) ⇒
       (∃ dif. Sqnj = (Sqni++dif)))) ∧
    (∀ supi HN Sqni Sqnj #i #j.
      (((Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
        (Sqn_UE_Change( supi, HN, Sqni ) @ #i)) ∧
       (#i < #j)) ⇒
      ((Sqnj = Sqni) ∨ (∃ dif. Sqnj = (Sqni++dif))))) ∧
   (∀ supi HN Sqni Sqnj #i #j.
     (((Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
       (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)) ∧
      (#i < #j)) ⇒
     ((Sqnj = Sqni) ∨ (∃ dif. Sqnj = (Sqni++dif))))"
/*
guarded formula characterizing all counter-examples:
"((∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Change( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (∀ dif. (Sqnj = (Sqni++dif)) ⇒ ⊥)) ∨
  (∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (∀ dif. (Sqnj = (Sqni++dif)) ⇒ ⊥)) ∨
  (∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Change( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (¬(Sqnj = Sqni)) ∧ (∀ dif. (Sqnj = (Sqni++dif)) ⇒ ⊥)) ∨
  (∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (¬(Sqnj = Sqni)) ∧ (∀ dif. (Sqnj = (Sqni++dif)) ⇒ ⊥)))"
*/
by sorry

lemma sqn_ue_unique [reuse, hide_lemma=sqn_ue_src,
                     hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi HN Sqn #i #j.
    ((Sqn_UE_Use( supi, HN, Sqn ) @ #i) ∧
     (Sqn_UE_Use( supi, HN, Sqn ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn #i #j.
  (Sqn_UE_Use( supi, HN, Sqn ) @ #i) ∧ (Sqn_UE_Use( supi, HN, Sqn ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma executability_honest [heuristic={executability_honest}]:
  exists-trace
  "∃ #i.
    ((((((((SEAF_End( ) @ #i) ∧ (¬(∃ X data #r. Rev( X, data ) @ #r))) ∧
          (∀ supi HN sqn_root #i.1.
            (Sqn_Create( supi, HN, sqn_root ) @ #i.1) ⇒
            (¬(∃ #j. K( sqn_root ) @ #j)))) ∧
         (∀ HN1 HN2 #j #k.
           ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
        (∀ S1 S2 HN1 HN2 #j #k.
          ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
          (#j = #k))) ∧
       (∀ S1 S2 HN1 HN2 #j #k.
         ((Register( S1, HN1 ) @ #j) ∧ (Register( S2, HN2 ) @ #k)) ⇒ (#j = #k))) ∧
      (∀ SNID1 SNID2 #j #k.
        ((Start_SEAF_Session( SNID1 ) @ #j) ∧
         (Start_SEAF_Session( SNID2 ) @ #k)) ⇒
        (#j = #k))) ∧
     (∀ UE1 UE2 #j #k.
       ((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ⇒
       (#j = #k))) ∧
    (∀ HN1 HN2 #j #k.
      ((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ⇒
      (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (SEAF_End( ) @ #i)
 ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ⇒ ⊥) ∧
  (∀ supi HN sqn_root #i.1.
    (Sqn_Create( supi, HN, sqn_root ) @ #i.1)
   ⇒
    ∀ #j. (K( sqn_root ) @ #j) ⇒ ⊥) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Register( S1, HN1 ) @ #j) ∧ (Register( S2, HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ SNID1 SNID2 #j #k.
    (Start_SEAF_Session( SNID1 ) @ #j) ∧ (Start_SEAF_Session( SNID2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 #j #k.
    (Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)
   ⇒
    #j = #k)"
*/
by sorry

lemma executability_keyConf_honest:
  exists-trace
  "∃ #i.
    ((((((((SEAF_EndConf( ) @ #i) ∧ (¬(∃ X data #r. Rev( X, data ) @ #r))) ∧
          (∀ supi HN sqn_root #i.1.
            (Sqn_Create( supi, HN, sqn_root ) @ #i.1) ⇒
            (¬(∃ #j. K( sqn_root ) @ #j)))) ∧
         (∀ HN1 HN2 #j #k.
           ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
        (∀ S1 S2 HN1 HN2 #j #k.
          ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
          (#j = #k))) ∧
       (∀ S1 S2 HN1 HN2 #j #k.
         ((Register( S1, HN1 ) @ #j) ∧ (Register( S2, HN2 ) @ #k)) ⇒ (#j = #k))) ∧
      (∀ SNID1 SNID2 #j #k.
        ((Start_SEAF_Session( SNID1 ) @ #j) ∧
         (Start_SEAF_Session( SNID2 ) @ #k)) ⇒
        (#j = #k))) ∧
     (∀ UE1 UE2 #j #k.
       ((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ⇒
       (#j = #k))) ∧
    (∀ HN1 HN2 #j #k.
      ((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ⇒
      (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (SEAF_EndConf( ) @ #i)
 ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ⇒ ⊥) ∧
  (∀ supi HN sqn_root #i.1.
    (Sqn_Create( supi, HN, sqn_root ) @ #i.1)
   ⇒
    ∀ #j. (K( sqn_root ) @ #j) ⇒ ⊥) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Register( S1, HN1 ) @ #j) ∧ (Register( S2, HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ SNID1 SNID2 #j #k.
    (Start_SEAF_Session( SNID1 ) @ #j) ∧ (Start_SEAF_Session( SNID2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 #j #k.
    (Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)
   ⇒
    #j = #k)"
*/
by sorry

lemma executability_desync [heuristic={tactic_7}]:
  exists-trace
  "∃ dif #i.
    (((((((((HSS_Resync_End( dif ) @ #i) ∧
            (¬(∃ X data #r. Rev( X, data ) @ #r))) ∧
           (∀ supi HN sqn_root #i.1.
             (Sqn_Create( supi, HN, sqn_root ) @ #i.1) ⇒
             (¬(∃ #j. K( sqn_root ) @ #j)))) ∧
          (∀ HN1 HN2 #j #k.
            ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
         (∀ S1 S2 HN1 HN2 #j #k.
           ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
           (#j = #k))) ∧
        (∀ S1 S2 HN1 HN2 #j #k.
          ((Register( S1, HN1 ) @ #j) ∧ (Register( S2, HN2 ) @ #k)) ⇒ (#j = #k))) ∧
       (∀ SNID1 SNID2 #j #k.
         ((Start_SEAF_Session( SNID1 ) @ #j) ∧
          (Start_SEAF_Session( SNID2 ) @ #k)) ⇒
         (#j = #k))) ∧
      (∀ UE1 UE2 #j #k.
        ((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ⇒
        (#j = #k))) ∧
     (∀ #j #k.
       ((Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k)) ⇒ (#j = #k))) ∧
    (∀ HN1 HN2 #j #k.
      ((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ⇒
      (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ dif #i.
  (HSS_Resync_End( dif ) @ #i)
 ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ⇒ ⊥) ∧
  (∀ supi HN sqn_root #i.1.
    (Sqn_Create( supi, HN, sqn_root ) @ #i.1)
   ⇒
    ∀ #j. (K( sqn_root ) @ #j) ⇒ ⊥) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Register( S1, HN1 ) @ #j) ∧ (Register( S2, HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ SNID1 SNID2 #j #k.
    (Start_SEAF_Session( SNID1 ) @ #j) ∧ (Start_SEAF_Session( SNID2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 #j #k.
    (Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ #j #k. (Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k) ⇒ #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)
   ⇒
    #j = #k)"
*/
by sorry

lemma executability_resync [heuristic={tactic_7}]:
  exists-trace
  "∃ #i1 #i2 #i3 #i4 X.
    ((((((((((((((((((Start_HSS_Session( X ) @ #i1) ∧
                     (HSS_Resync_End( ('1'++'1'++'1'++'1') ) @ #i2)) ∧
                    (Start_HSS_Session( X ) @ #i3)) ∧
                   (HSS_End( ) @ #i4)) ∧
                  (#i1 < #i2)) ∧
                 (#i2 < #i3)) ∧
                (#i3 < #i4)) ∧
               (¬(∃ X.1 data #r. Rev( X.1, data ) @ #r))) ∧
              (∀ #j #k.
                ((Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k)) ⇒ (#j = #k))) ∧
             (∀ a b #j #k.
               ((HSS_Resync_End( a ) @ #j) ∧ (HSS_Resync_End( b ) @ #k)) ⇒ (#j = #k))) ∧
            (∀ #j #k #l.
              ((((HSS_Send_Aia( ) @ #j) ∧ (HSS_Send_Aia( ) @ #k)) ∧
                (HSS_Send_Aia( ) @ #l)) ∧
               (¬(#j = #k))) ⇒
              ((#j = #l) ∨ (#k = #l)))) ∧
           (∀ #j #k. ((HSS_End( ) @ #j) ∧ (HSS_End( ) @ #k)) ⇒ (#j = #k))) ∧
          (∀ supi HN sqn_root #i.
            (Sqn_Create( supi, HN, sqn_root ) @ #i) ⇒
            (¬(∃ #j. !KU( sqn_root ) @ #j)))) ∧
         (∀ HN1 HN2 #j #k.
           ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
        (∀ SN1 SN2 #j #k.
          ((ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k)) ⇒ (#j = #k))) ∧
       (∀ S1 S2 H1 H2 sqn_root1 sqn_root2 #k #j.
         ((Sqn_Create( S1, H1, sqn_root1 ) @ #j) ∧
          (Sqn_Create( S2, H2, sqn_root2 ) @ #k)) ⇒
         (#j = #k))) ∧
      (∀ UE1 UE2 UE3 #j #k #l.
        ((((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ∧
          (Start_UE_Session( UE3 ) @ #l)) ∧
         (¬(#j = #k))) ⇒
        ((#j = #l) ∨ (#k = #l)))) ∧
     (∀ HN1 HN2 HN3 #j #k #l.
       ((((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ∧
         (Start_HSS_Session( HN3 ) @ #l)) ∧
        (¬(#j = #k))) ⇒
       ((#j = #l) ∨ (#k = #l)))) ∧
    (∀ SNID1 SNID2 SNID3 #j #k #l.
      ((((Start_SEAF_Session( SNID1 ) @ #j) ∧
         (Start_SEAF_Session( SNID2 ) @ #k)) ∧
        (Start_SEAF_Session( SNID3 ) @ #l)) ∧
       (¬(#j = #k))) ⇒
      ((#j = #l) ∨ (#k = #l)))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i1 #i2 #i3 #i4 X.
  (Start_HSS_Session( X ) @ #i1) ∧
  (HSS_Resync_End( ('1'++'1'++'1'++'1') ) @ #i2) ∧
  (Start_HSS_Session( X ) @ #i3) ∧
  (HSS_End( ) @ #i4)
 ∧
  (#i1 < #i2) ∧
  (#i2 < #i3) ∧
  (#i3 < #i4) ∧
  (∀ X.1 data #r. (Rev( X.1, data ) @ #r) ⇒ ⊥) ∧
  (∀ #j #k. (Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k) ⇒ #j = #k) ∧
  (∀ a b #j #k.
    (HSS_Resync_End( a ) @ #j) ∧ (HSS_Resync_End( b ) @ #k) ⇒ #j = #k) ∧
  (∀ #j #k #l.
    (HSS_Send_Aia( ) @ #j) ∧ (HSS_Send_Aia( ) @ #k) ∧ (HSS_Send_Aia( ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ #j #k. (HSS_End( ) @ #j) ∧ (HSS_End( ) @ #k) ⇒ #j = #k) ∧
  (∀ supi HN sqn_root #i.
    (Sqn_Create( supi, HN, sqn_root ) @ #i)
   ⇒
    ∀ #j. (!KU( sqn_root ) @ #j) ⇒ ⊥) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ SN1 SN2 #j #k.
    (ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 H1 H2 sqn_root1 sqn_root2 #k #j.
    (Sqn_Create( S1, H1, sqn_root1 ) @ #j) ∧
    (Sqn_Create( S2, H2, sqn_root2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 UE3 #j #k #l.
    (Start_UE_Session( UE1 ) @ #j) ∧
    (Start_UE_Session( UE2 ) @ #k) ∧
    (Start_UE_Session( UE3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ HN1 HN2 HN3 #j #k #l.
    (Start_HSS_Session( HN1 ) @ #j) ∧
    (Start_HSS_Session( HN2 ) @ #k) ∧
    (Start_HSS_Session( HN3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ SNID1 SNID2 SNID3 #j #k #l.
    (Start_SEAF_Session( SNID1 ) @ #j) ∧
    (Start_SEAF_Session( SNID2 ) @ #k) ∧
    (Start_SEAF_Session( SNID3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l)))"
*/
by sorry

lemma weakagreement_ue_seaf_noRev [heuristic={weakagreement_ue_seaf_noRev},
                                   hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                   hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'SEAF', t> ) @ #i) ⇒
    ((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'SEAF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_ue_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev_noChanRev [heuristic={weakagreement_ue_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev},
                                                                               hide_lemma=sqn_ue_nodecrease,
                                                                               hide_lemma=sqn_ue_src,
                                                                               hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'SEAF', t> ) @ #i) ⇒
    ((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
         (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'SEAF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_ue_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev [heuristic={weakagreement_ue_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev},
                                                                     hide_lemma=sqn_ue_nodecrease,
                                                                     hide_lemma=sqn_ue_src,
                                                                     hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'SEAF', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'SEAF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_ue_seaf_noAsyKeyRev_noSupiRev_noSqnRev [heuristic={weakagreement_ue_seaf_noAsyKeyRev_noSupiRev_noSqnRev},
                                                            hide_lemma=sqn_ue_nodecrease,
                                                            hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'SEAF', t> ) @ #i) ⇒
    ((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'SEAF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_ue_seaf_noAsyKeyRev_noSupiRev [heuristic={weakagreement_ue_seaf_noAsyKeyRev_noSupiRev},
                                                   hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                   hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'SEAF', t> ) @ #i) ⇒
    (((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
      (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'SEAF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_ue_seaf_noAsyKeyRev [heuristic={weakagreement_ue_seaf_noAsyKeyRev},
                                         hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                         hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'SEAF', t> ) @ #i) ⇒
    ((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
     (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'SEAF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_ue_seaf [heuristic={weakagreement_ue_seaf_noAsyKeyRev},
                             hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                             hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'SEAF', t> ) @ #i) ⇒
    (∃ t2 #j. Running( b, a, t2 ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'SEAF', t> ) @ #i)
 ∧
  ∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥"
*/
by sorry

lemma weakagreement_ue_seaf_keyConf_noRev [heuristic={weakagreement_ue_seaf_keyConf_noRev},
                                           hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                           hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'UE', 'SEAF', t> ) @ #i) ⇒
    ((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'UE', 'SEAF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_ue_seaf_keyConf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev_noChanRev [heuristic={weakagreement_ue_seaf_keyConf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev_noChanRev},
                                                                                       hide_lemma=sqn_ue_nodecrease,
                                                                                       hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'UE', 'SEAF', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'UE', 'SEAF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( CommitConf( a, b, <'UE', 'SEAF', t> ) @ #i )
  case ue_key_confirmation
  solve( St_2_UE( ~tid, ~supi, ~idHN, b, ~k, ~sqn_root, b, K_seaf, pk_HN
         ) ▶₀ #i )
    case ue_receive_authReq_freshness_success_send_authResp
    by contradiction /* from formulas */
  qed
qed

lemma weakagreement_ue_hss_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev [heuristic={tactic_1},
                                                                     hide_lemma=sqn_ue_src,
                                                                     hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'HSS', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'HSS', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma cleanAttack_injectiveagreement_ue_hss_supi_noRev [heuristic={cleanAttack},
                                                        hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src,
                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (((Commit( a, b, <'UE', 'HSS', 'supi', t> ) @ #i) ∧
      (∀ UE1 UE2 UE3 #j #k #l.
        ((((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ∧
          (Start_UE_Session( UE3 ) @ #l)) ∧
         (¬(#j = #k))) ⇒
        ((#j = #l) ∨ (#k = #l)))) ∧
     (∀ HN1 HN2 HN3 #j #k #l.
       ((((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ∧
         (Start_HSS_Session( HN3 ) @ #l)) ∧
        (¬(#j = #k))) ⇒
       ((#j = #l) ∨ (#k = #l)))) ⇒
    ((∃ #j.
       ((Running( b, a, <'UE', 'HSS', 'supi', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'UE', 'HSS', 'supi', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'HSS', 'supi', t> ) @ #i)
 ∧
  (∀ UE1 UE2 UE3 #j #k #l.
    (Start_UE_Session( UE1 ) @ #j) ∧
    (Start_UE_Session( UE2 ) @ #k) ∧
    (Start_UE_Session( UE3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ HN1 HN2 HN3 #j #k #l.
    (Start_HSS_Session( HN1 ) @ #j) ∧
    (Start_HSS_Session( HN2 ) @ #k) ∧
    (Start_HSS_Session( HN3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ #j.
    (Running( b, a, <'UE', 'HSS', 'supi', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'UE', 'HSS', 'supi', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_ue_hss_supi_noKeyRev [heuristic={injective_agreemeent},
                                                  hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                  hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'HSS', 'supi', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'UE', 'HSS', 'supi', t> ) @ #j) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'HSS', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'UE', 'HSS', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_ue_hss_kseaf_noRev [heuristic={tactic_6},
                                                hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'HSS', 'K_seaf', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'UE', 'HSS', 'K_seaf', t> ) @ #j) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'HSS', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'UE', 'HSS', 'K_seaf', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_ue_hss_snname_noRev [heuristic={tactic_6},
                                                 hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                 hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'UE', 'HSS', 'snname', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'UE', 'HSS', 'snname', t> ) @ #j) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'UE', 'HSS', 'snname', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'UE', 'HSS', 'snname', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_ue_hss_keyConf_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev [heuristic={tactic_1},
                                                                             hide_lemma=sqn_ue_src,
                                                                             hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'UE', 'HSS', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'UE', 'HSS', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_ue_hss_kseaf_keyConf_noKeyRev [heuristic={tactic_0},
                                                        hide_lemma=sqn_ue_src, hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'UE', 'HSS', 'K_seaf', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'UE', 'HSS', 'K_seaf', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (CommitConf( a2, b2, <'UE', 'HSS', 'K_seaf', t> ) @ #i2) ∧
           (¬(#i2 = #i))))) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'UE', 'HSS', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'UE', 'HSS', 'K_seaf', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (CommitConf( a2, b2, <'UE', 'HSS', 'K_seaf', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_ue_hss_snname_keyConf_noKeyRev [heuristic={tactic_0},
                                                            hide_lemma=sqn_ue_src,
                                                            hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'UE', 'HSS', 'snname', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'UE', 'HSS', 'snname', t> ) @ #j) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'UE', 'HSS', 'snname', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'UE', 'HSS', 'snname', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma cleanAttack_injectiveagreement_ue_hss_keyConf_supi_noRev [heuristic={cleanAttack},
                                                                hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src,
                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (((CommitConf( a, b, <'UE', 'HSS', 'supi', t> ) @ #i) ∧
      (∀ UE1 UE2 UE3 #j #k #l.
        ((((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ∧
          (Start_UE_Session( UE3 ) @ #l)) ∧
         (¬(#j = #k))) ⇒
        ((#j = #l) ∨ (#k = #l)))) ∧
     (∀ HN1 HN2 HN3 #j #k #l.
       ((((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ∧
         (Start_HSS_Session( HN3 ) @ #l)) ∧
        (¬(#j = #k))) ⇒
       ((#j = #l) ∨ (#k = #l)))) ⇒
    ((∃ #j.
       ((Running( b, a, <'UE', 'HSS', 'supi', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (CommitConf( a2, b2, <'UE', 'HSS', 'supi', t> ) @ #i2) ∧
           (¬(#i2 = #i))))) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'UE', 'HSS', 'supi', t> ) @ #i)
 ∧
  (∀ UE1 UE2 UE3 #j #k #l.
    (Start_UE_Session( UE1 ) @ #j) ∧
    (Start_UE_Session( UE2 ) @ #k) ∧
    (Start_UE_Session( UE3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ HN1 HN2 HN3 #j #k #l.
    (Start_HSS_Session( HN1 ) @ #j) ∧
    (Start_HSS_Session( HN2 ) @ #k) ∧
    (Start_HSS_Session( HN3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ #j.
    (Running( b, a, <'UE', 'HSS', 'supi', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (CommitConf( a2, b2, <'UE', 'HSS', 'supi', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_ue_hss_keyConf_supi_noKeyRev [heuristic={tactic_0},
                                                          hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                          hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'UE', 'HSS', 'supi', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'UE', 'HSS', 'supi', t> ) @ #j) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'UE', 'HSS', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'UE', 'HSS', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_seaf_ue_kseaf_noRev [heuristic={tactic_4},
                                                 hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                 hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SEAF', 'UE', 'K_seaf', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'SEAF', 'UE', 'K_seaf', t> ) @ #j) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'UE', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SEAF', 'UE', 'K_seaf', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma cleanAttack_injectiveagreement_seaf_ue_supi_noRev [heuristic={tactic_3},
                                                         hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src,
                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (((Commit( a, b, <'SEAF', 'UE', 'supi', t> ) @ #i) ∧
      (∀ UE1 UE2 UE3 #j #k #l.
        ((((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ∧
          (Start_UE_Session( UE3 ) @ #l)) ∧
         (¬(#j = #k))) ⇒
        ((#j = #l) ∨ (#k = #l)))) ∧
     (∀ HN1 HN2 HN3 #j #k #l.
       ((((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ∧
         (Start_HSS_Session( HN3 ) @ #l)) ∧
        (¬(#j = #k))) ⇒
       ((#j = #l) ∨ (#k = #l)))) ⇒
    ((∃ #j.
       ((Running( b, a, <'SEAF', 'UE', 'supi', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'SEAF', 'UE', 'supi', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'UE', 'supi', t> ) @ #i)
 ∧
  (∀ UE1 UE2 UE3 #j #k #l.
    (Start_UE_Session( UE1 ) @ #j) ∧
    (Start_UE_Session( UE2 ) @ #k) ∧
    (Start_UE_Session( UE3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ HN1 HN2 HN3 #j #k #l.
    (Start_HSS_Session( HN1 ) @ #j) ∧
    (Start_HSS_Session( HN2 ) @ #k) ∧
    (Start_HSS_Session( HN3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ #j.
    (Running( b, a, <'SEAF', 'UE', 'supi', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'SEAF', 'UE', 'supi', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_seaf_ue_supi_noKeyRev_noChanRev [heuristic={tactic_2},
                                                             hide_lemma=sqn_ue_nodecrease,
                                                             hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SEAF', 'UE', 'supi', t> ) @ #i) ⇒
    (((∃ #j. Running( b, a, <'SEAF', 'UE', 'supi', t> ) @ #j) ∨
      (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'UE', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SEAF', 'UE', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_seaf_ue_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev [heuristic={tactic_3},
                                                                     hide_lemma=sqn_ue_src,
                                                                     hide_lemma=sqn_hss_src,
                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SEAF', 'UE', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'UE', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_seaf_ue_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev [heuristic={tactic_3},
                                                                      hide_lemma=sqn_ue_src,
                                                                      hide_lemma=sqn_hss_src,
                                                                      hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SEAF', 'UE', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'UE', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_seaf_ue_noKeyRev_noChanRev [heuristic={tactic_2},
                                                hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src,
                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SEAF', 'UE', t> ) @ #i) ⇒
    (((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
      (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'UE', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_seaf_ue_kseaf_keyConf_noRev [heuristic={tactic_4},
                                                         hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                         hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'SEAF', 'UE', 'K_seaf', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'SEAF', 'UE', 'K_seaf', t> ) @ #j) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'SEAF', 'UE', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SEAF', 'UE', 'K_seaf', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_seaf_ue_keyConf_supi_noKeyRev_noChanRev [heuristic={tactic_2},
                                                                     hide_lemma=sqn_ue_nodecrease,
                                                                     hide_lemma=sqn_ue_src,
                                                                     hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'SEAF', 'UE', 'supi', t> ) @ #i) ⇒
    (((∃ #j. Running( b, a, <'SEAF', 'UE', 'supi', t> ) @ #j) ∨
      (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'SEAF', 'UE', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SEAF', 'UE', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_seaf_ue_KeyConf_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev [heuristic={tactic_3},
                                                                             hide_lemma=sqn_ue_src,
                                                                             hide_lemma=sqn_hss_src,
                                                                             hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'SEAF', 'UE', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'SEAF', 'UE', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_seaf_ue_KeyConf_noKeyRev_noChanRev [heuristic={tactic_2},
                                                        hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src,
                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'SEAF', 'UE', t> ) @ #i) ⇒
    (((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
      (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'SEAF', 'UE', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_seaf_ue_KeyConf_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev [heuristic={tactic_3},
                                                                              hide_lemma=sqn_ue_src,
                                                                              hide_lemma=sqn_hss_src,
                                                                              hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'SEAF', 'UE', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'SEAF', 'UE', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_seaf_hss_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev [heuristic={tactic_5},
                                                                      hide_lemma=sqn_ue_src,
                                                                      hide_lemma=sqn_hss_src,
                                                                      hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SEAF', 'HSS', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'HSS', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_seaf_hss_kseaf_noChanRev [heuristic={tactic_5},
                                                      hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                      hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_seaf_hss_kseaf_noChanRev_noSqnRev_noSupiRev_noAsyKeyRev [heuristic={injectiveagreement_seaf_hss_kseaf_noChanRev_noSqnRev_noSupiRev_noAsyKeyRev},
                                                                                  hide_lemma=sqn_ue_nodecrease,
                                                                                  hide_lemma=sqn_ue_src,
                                                                                  hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i) ⇒
    (((((∃ #j.
          ((Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j) ∧ (#j < #i)) ∧
          (¬(∃ a2 b2 #i2.
              (Commit( a2, b2, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i2) ∧
              (¬(#i2 = #i))))) ∨
        (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_seaf_hss_kseaf_noKeyRev_noChanRev [heuristic={tactic_5},
                                                            hide_lemma=sqn_ue_nodecrease,
                                                            hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i) ⇒
    (((∃ #j.
        ((Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ a2 b2 #i2.
            (Commit( a2, b2, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i2) ∧
            (¬(#i2 = #i))))) ∨
      (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_seaf_hss_supi_noChanRev [heuristic={tactic_5},
                                                     hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                     hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SEAF', 'HSS', 'supi', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'SEAF', 'HSS', 'supi', t> ) @ #j) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SEAF', 'HSS', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SEAF', 'HSS', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_seaf_hss_keyConf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev [heuristic={tactic_5},
                                                                              hide_lemma=sqn_ue_src,
                                                                              hide_lemma=sqn_hss_src,
                                                                              hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'SEAF', 'HSS', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'SEAF', 'HSS', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_seaf_hss_kseaf_keyConf_noChanRev [heuristic={tactic_5},
                                                              hide_lemma=sqn_ue_nodecrease,
                                                              hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_seaf_hss_kseaf_keyConf_noChanRev_noSqnRev_noSupiRev_noAsyKeyRev [heuristic={injectiveagreement_seaf_hss_kseaf_keyConf_noChanRev_noSqnRev_noSupiRev_noAsyKeyRev},
                                                                                          hide_lemma=sqn_ue_nodecrease,
                                                                                          hide_lemma=sqn_ue_src,
                                                                                          hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i) ⇒
    (((((∃ #j.
          ((Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j) ∧ (#j < #i)) ∧
          (¬(∃ a2 b2 #i2.
              (CommitConf( a2, b2, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i2) ∧
              (¬(#i2 = #i))))) ∨
        (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (CommitConf( a2, b2, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_seaf_hss_kseaf_keyConf_noKeyRev_noChanRev [heuristic={tactic_5},
                                                                    hide_lemma=sqn_ue_nodecrease,
                                                                    hide_lemma=sqn_ue_src,
                                                                    hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i) ⇒
    (((∃ #j.
        ((Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ a2 b2 #i2.
            (CommitConf( a2, b2, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i2) ∧
            (¬(#i2 = #i))))) ∨
      (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'SEAF', 'HSS', 'K_seaf', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (CommitConf( a2, b2, <'SEAF', 'HSS', 'K_seaf', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_seaf_hss_keyConf_supi_noChanRev [heuristic={tactic_5},
                                                             hide_lemma=sqn_ue_nodecrease,
                                                             hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (CommitConf( a, b, <'SEAF', 'HSS', 'supi', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'SEAF', 'HSS', 'supi', t> ) @ #j) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (CommitConf( a, b, <'SEAF', 'HSS', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SEAF', 'HSS', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_hss_ue_kseaf_noKeyRev [heuristic={injective_agreemeent},
                                                hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HSS', 'UE', 'K_seaf', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'HSS', 'UE', 'K_seaf', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'HSS', 'UE', 'K_seaf', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HSS', 'UE', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'HSS', 'UE', 'K_seaf', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'HSS', 'UE', 'K_seaf', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_hss_ue_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev [heuristic={weakagreement_hss_ue_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev},
                                                                     hide_lemma=sqn_ue_src,
                                                                     hide_lemma=sqn_hss_src,
                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HSS', 'UE', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HSS', 'UE', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_hss_ue_supi_noKeyRev [heuristic={noninjectiveagreement},
                                                  hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                  hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HSS', 'UE', 'supi', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'HSS', 'UE', 'supi', t> ) @ #j) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HSS', 'UE', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'HSS', 'UE', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_hss_ue_snname_noKeyRev [heuristic={noninjectiveagreement},
                                                    hide_lemma=sqn_ue_src, hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HSS', 'UE', 'snname', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'HSS', 'UE', 'snname', t> ) @ #j) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HSS', 'UE', 'snname', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'HSS', 'UE', 'snname', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_hss_seaf_kseaf_noChanRev [heuristic={injectiveagreement_hss_seaf_kseaf_noChanRev},
                                                   hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                   hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HSS', 'SEAF', 'K_seaf', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'HSS', 'SEAF', 'K_seaf', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'HSS', 'SEAF', 'K_seaf', t> ) @ #i2) ∧
           (¬(#i2 = #i))))) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HSS', 'SEAF', 'K_seaf', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'HSS', 'SEAF', 'K_seaf', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'HSS', 'SEAF', 'K_seaf', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_hss_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev [heuristic={weakagreement_hss_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev},
                                                                      hide_lemma=sqn_ue_src,
                                                                      hide_lemma=sqn_hss_src,
                                                                      hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HSS', 'SEAF', t> ) @ #i) ⇒
    (((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
        (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HSS', 'SEAF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_hss_seaf_supi_noRev [heuristic={noninjectiveagreement_hss_seaf_supi_noRev},
                                                 hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                 hide_lemma=sqn_hss_src]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HSS', 'SEAF', 'supi', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'HSS', 'SEAF', 'supi', t> ) @ #j) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HSS', 'SEAF', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'HSS', 'SEAF', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma cleanAttack_secrecy_ue_supi_noRev [heuristic={secrecy_ue_supi},
                                         hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                         hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (((Secret( <'UE', supi>, 'supi', t ) @ #i) ∧
      (∀ UE1 UE2 UE3 #j #k #l.
        ((((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ∧
          (Start_UE_Session( UE3 ) @ #l)) ∧
         (¬(#j = #k))) ⇒
        ((#j = #l) ∨ (#k = #l)))) ∧
     (∀ HN1 HN2 HN3 #j #k #l.
       ((((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ∧
         (Start_HSS_Session( HN3 ) @ #l)) ∧
        (¬(#j = #k))) ⇒
       ((#j = #l) ∨ (#k = #l)))) ⇒
    ((¬(∃ #j. K( t ) @ #j)) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'UE', supi>, 'supi', t ) @ #i)
 ∧
  (∀ UE1 UE2 UE3 #j #k #l.
    (Start_UE_Session( UE1 ) @ #j) ∧
    (Start_UE_Session( UE2 ) @ #k) ∧
    (Start_UE_Session( UE3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ HN1 HN2 HN3 #j #k #l.
    (Start_HSS_Session( HN1 ) @ #j) ∧
    (Start_HSS_Session( HN2 ) @ #k) ∧
    (Start_HSS_Session( HN3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_ue_supi_noChanRevAtAll_noSupiRev_noAsyKeyRev [heuristic={secrecy_ue_supi},
                                                            hide_lemma=sqn_ue_nodecrease,
                                                            hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'UE', supi>, 'supi', t ) @ #i) ⇒
    ((((¬(∃ #j. K( t ) @ #j)) ∨ (∃ X #r. Rev( X, 'secureChannel' ) @ #r)) ∨
      (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'UE', supi>, 'supi', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_ue_supi_noChanRevAtAll_noSupiRev_noKeyRev_noSqnRev [heuristic={secrecy_ue_supi},
                                                                  hide_lemma=sqn_ue_nodecrease,
                                                                  hide_lemma=sqn_ue_src,
                                                                  hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'UE', supi>, 'supi', t ) @ #i) ⇒
    (((((¬(∃ #j. K( t ) @ #j)) ∨ (∃ X #r. Rev( X, 'secureChannel' ) @ #r)) ∨
       (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'UE', supi>, 'supi', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma cleanAttack_secrecy_ue_supi_keyConf_noRev [heuristic={secrecy_ue_supi},
                                                 hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                                 hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (((SecretConf( <'UE', supi>, 'supi', t ) @ #i) ∧
      (∀ UE1 UE2 UE3 #j #k #l.
        ((((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ∧
          (Start_UE_Session( UE3 ) @ #l)) ∧
         (¬(#j = #k))) ⇒
        ((#j = #l) ∨ (#k = #l)))) ∧
     (∀ HN1 HN2 HN3 #j #k #l.
       ((((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ∧
         (Start_HSS_Session( HN3 ) @ #l)) ∧
        (¬(#j = #k))) ⇒
       ((#j = #l) ∨ (#k = #l)))) ⇒
    ((¬(∃ #j. K( t ) @ #j)) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (SecretConf( <'UE', supi>, 'supi', t ) @ #i)
 ∧
  (∀ UE1 UE2 UE3 #j #k #l.
    (Start_UE_Session( UE1 ) @ #j) ∧
    (Start_UE_Session( UE2 ) @ #k) ∧
    (Start_UE_Session( UE3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ HN1 HN2 HN3 #j #k #l.
    (Start_HSS_Session( HN1 ) @ #j) ∧
    (Start_HSS_Session( HN2 ) @ #k) ∧
    (Start_HSS_Session( HN3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_ue_kseaf_noKeyRev_noChanRev [heuristic={secrecy_ue_kseaf},
                                           hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                           hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'UE', supi>, 'key', t ) @ #i) ⇒
    (((¬(∃ #j. K( t ) @ #j)) ∨
      (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'UE', supi>, 'key', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_ue_kseaf_noChanRev_noSupiRev_noSqnRev_noAsyKeyRev [heuristic={secrecy_ue_kseaf},
                                                                 hide_lemma=sqn_ue_nodecrease,
                                                                 hide_lemma=sqn_ue_src,
                                                                 hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'UE', supi>, 'key', t ) @ #i) ⇒
    (((((¬(∃ #j. K( t ) @ #j)) ∨
        (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'UE', supi>, 'key', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_ue_kseaf_noKeyRev_noSupiRev_noSqnRev_noAsyKeyRev [heuristic={secrecy_ue_kseaf_noKeyRev_noSupiRev_noSqnRev_noAsyKeyRev},
                                                                hide_lemma=sqn_ue_nodecrease,
                                                                hide_lemma=sqn_ue_src,
                                                                hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'UE', supi>, 'key', t ) @ #i) ⇒
    (((((¬(∃ #j. K( t ) @ #j)) ∨
        (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'UE', supi>, 'key', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_ue_k_noKeyRev [hide_lemma=sqn_ue_nodecrease,
                             hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'UE', supi>, 'k', t ) @ #i) ⇒
    ((¬(∃ #j. K( t ) @ #j)) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'UE', supi>, 'k', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_hss_kseaf_noKeyRev_noSupiRev_noSqnRev_noAsyKeyRev [heuristic={secrecy_hss_no_k},
                                                                 hide_lemma=sqn_ue_nodecrease,
                                                                 hide_lemma=sqn_ue_src,
                                                                 hide_lemma=sqn_hss_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HSS', idHN>, 'key', t ) @ #i) ⇒
    (((((¬(∃ #j. K( t ) @ #j)) ∨
        (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HSS', idHN>, 'key', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_hss_kseaf_noChanRev_noSupiRev_noSqnRev_noAsyKeyRev [heuristic={secrecy_hss_kseaf_noChanRev_noSupiRev_noSqnRev_noAsyKeyRev},
                                                                  hide_lemma=sqn_ue_nodecrease,
                                                                  hide_lemma=sqn_ue_src,
                                                                  hide_lemma=sqn_hss_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HSS', idHN>, 'key', t ) @ #i) ⇒
    (((((¬(∃ #j. K( t ) @ #j)) ∨
        (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HSS', idHN>, 'key', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_hss_kseaf_noChanRev_noKeyRev [heuristic={secrecy_hss_kseaf_noChanRev_noKeyRev},
                                            hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                            hide_lemma=sqn_hss_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HSS', idHN>, 'key', t ) @ #i) ⇒
    (((¬(∃ #j. K( t ) @ #j)) ∨
      (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HSS', idHN>, 'key', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma cleanAttack_secrecy_hss_supi_noRev [heuristic={secrecy_hss_no_k},
                                          hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                          hide_lemma=sqn_hss_src]:
  all-traces
  "∀ idHN t #i.
    (((Secret( <'HSS', idHN>, 'supi', t ) @ #i) ∧
      (∀ UE1 UE2 UE3 #j #k #l.
        ((((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ∧
          (Start_UE_Session( UE3 ) @ #l)) ∧
         (¬(#j = #k))) ⇒
        ((#j = #l) ∨ (#k = #l)))) ∧
     (∀ HN1 HN2 HN3 #j #k #l.
       ((((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ∧
         (Start_HSS_Session( HN3 ) @ #l)) ∧
        (¬(#j = #k))) ⇒
       ((#j = #l) ∨ (#k = #l)))) ⇒
    ((¬(∃ #j. K( t ) @ #j)) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HSS', idHN>, 'supi', t ) @ #i)
 ∧
  (∀ UE1 UE2 UE3 #j #k #l.
    (Start_UE_Session( UE1 ) @ #j) ∧
    (Start_UE_Session( UE2 ) @ #k) ∧
    (Start_UE_Session( UE3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ HN1 HN2 HN3 #j #k #l.
    (Start_HSS_Session( HN1 ) @ #j) ∧
    (Start_HSS_Session( HN2 ) @ #k) ∧
    (Start_HSS_Session( HN3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_hss_supi_noChanRevAtAll_noSupiRev_noAsyKeyRev [heuristic={secrecy_hss_supi_noChanRevAtAll_noSupiRev_noAsyKeyRev},
                                                             hide_lemma=sqn_ue_nodecrease,
                                                             hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'HSS', supi>, 'supi', t ) @ #i) ⇒
    ((((¬(∃ #j. K( t ) @ #j)) ∨ (∃ X #r. Rev( X, 'secureChannel' ) @ #r)) ∨
      (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'HSS', supi>, 'supi', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_hss_supi_noChanRevAtAll_noSupiRev_noKeyRev_noSqnRev [heuristic={secrecy_hss_no_k},
                                                                   hide_lemma=sqn_ue_nodecrease,
                                                                   hide_lemma=sqn_ue_src,
                                                                   hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'HSS', supi>, 'supi', t ) @ #i) ⇒
    (((((¬(∃ #j. K( t ) @ #j)) ∨ (∃ X #r. Rev( X, 'secureChannel' ) @ #r)) ∨
       (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'HSS', supi>, 'supi', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_hss_k_noKeyRev [hide_lemma=sqn_ue_nodecrease,
                              hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'HSS', supi>, 'k', t ) @ #i) ⇒
    ((¬(∃ #j. K( t ) @ #j)) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'HSS', supi>, 'k', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_seaf_kseaf_noChanRev_noKeyRev [heuristic={secrecy_seaf_kseaf_noChanRev_noKeyRev},
                                             hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                             hide_lemma=sqn_hss_src]:
  all-traces
  "∀ idSN t #i.
    (Secret( <'SEAF', idSN>, 'key', t ) @ #i) ⇒
    (((¬(∃ #j. K( t ) @ #j)) ∨
      (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ idSN t #i.
  (Secret( <'SEAF', idSN>, 'key', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_seaf_kseaf_noChanRev_noSupiRev_noSqnRev_noAsyKeyRev [heuristic={secrecy_seaf},
                                                                   hide_lemma=sqn_ue_nodecrease,
                                                                   hide_lemma=sqn_ue_src,
                                                                   hide_lemma=sqn_hss_src]:
  all-traces
  "∀ idSN t #i.
    (Secret( <'SEAF', idSN>, 'key', t ) @ #i) ⇒
    (((((¬(∃ #j. K( t ) @ #j)) ∨
        (∃ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ idSN t #i.
  (Secret( <'SEAF', idSN>, 'key', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_seaf_kseaf_noKeyRev_noSupiRev_noSqnRev_noAsyKeyRev [heuristic={secrecy_seaf},
                                                                  hide_lemma=sqn_ue_nodecrease,
                                                                  hide_lemma=sqn_ue_src,
                                                                  hide_lemma=sqn_hss_src]:
  all-traces
  "∀ idSN t #i.
    (Secret( <'SEAF', idSN>, 'key', t ) @ #i) ⇒
    (((((¬(∃ #j. K( t ) @ #j)) ∨
        (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ idSN t #i.
  (Secret( <'SEAF', idSN>, 'key', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma cleanAttack_secrecy_seaf_supi_noRev [heuristic={secrecy_seaf},
                                           hide_lemma=sqn_ue_nodecrease, hide_lemma=sqn_ue_src,
                                           hide_lemma=sqn_hss_src]:
  all-traces
  "∀ idSN t #i.
    (((Secret( <'SEAF', idSN>, 'supi', t ) @ #i) ∧
      (∀ UE1 UE2 UE3 #j #k #l.
        ((((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ∧
          (Start_UE_Session( UE3 ) @ #l)) ∧
         (¬(#j = #k))) ⇒
        ((#j = #l) ∨ (#k = #l)))) ∧
     (∀ HN1 HN2 HN3 #j #k #l.
       ((((Start_HSS_Session( HN1 ) @ #j) ∧ (Start_HSS_Session( HN2 ) @ #k)) ∧
         (Start_HSS_Session( HN3 ) @ #l)) ∧
        (¬(#j = #k))) ⇒
       ((#j = #l) ∨ (#k = #l)))) ⇒
    ((¬(∃ #j. K( t ) @ #j)) ∨
     (∃ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ idSN t #i.
  (Secret( <'SEAF', idSN>, 'supi', t ) @ #i)
 ∧
  (∀ UE1 UE2 UE3 #j #k #l.
    (Start_UE_Session( UE1 ) @ #j) ∧
    (Start_UE_Session( UE2 ) @ #k) ∧
    (Start_UE_Session( UE3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ HN1 HN2 HN3 #j #k #l.
    (Start_HSS_Session( HN1 ) @ #j) ∧
    (Start_HSS_Session( HN2 ) @ #k) ∧
    (Start_HSS_Session( HN3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_seaf_supi_noChanRevAtAll_noSupiRev_noAsyKeyRev [heuristic={secrecy_seaf_supi_noChanRevAtAll_noSupiRev_noAsyKeyRev},
                                                              hide_lemma=sqn_ue_nodecrease,
                                                              hide_lemma=sqn_ue_src, hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'SEAF', supi>, 'supi', t ) @ #i) ⇒
    ((((¬(∃ #j. K( t ) @ #j)) ∨ (∃ X #r. Rev( X, 'secureChannel' ) @ #r)) ∨
      (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'SEAF', supi>, 'supi', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry

lemma secrecy_seaf_supi_noChanRevAtAll_noSupiRev_noKeyRev_noSqnRev [heuristic={secrecy_seaf},
                                                                    hide_lemma=sqn_ue_nodecrease,
                                                                    hide_lemma=sqn_ue_src,
                                                                    hide_lemma=sqn_hss_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'SEAF', supi>, 'supi', t ) @ #i) ⇒
    (((((¬(∃ #j. K( t ) @ #j)) ∨ (∃ X #r. Rev( X, 'secureChannel' ) @ #r)) ∨
       (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'SEAF', supi>, 'supi', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥) ∧
  (∀ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
by sorry







































/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.8.0
Maude version 2.7.1
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2023-08-30 13:15:41.590881948 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: 5G_AKA_test.spthy

  processing time: 4.94s
  
  dummy (all-traces): analysis incomplete (1 steps)
  rand_autn_src (all-traces): analysis incomplete (1 steps)
  sqn_ue_invariance (all-traces): analysis incomplete (1 steps)
  sqn_hss_invariance (all-traces): analysis incomplete (1 steps)
  sqn_ue_src (all-traces): analysis incomplete (1 steps)
  sqn_hss_src (all-traces): analysis incomplete (1 steps)
  sqn_ue_nodecrease (all-traces): analysis incomplete (1 steps)
  sqn_ue_unique (all-traces): analysis incomplete (1 steps)
  executability_honest (exists-trace): analysis incomplete (1 steps)
  executability_keyConf_honest (exists-trace): analysis incomplete (1 steps)
  executability_desync (exists-trace): analysis incomplete (1 steps)
  executability_resync (exists-trace): analysis incomplete (1 steps)
  weakagreement_ue_seaf_noRev (all-traces): analysis incomplete (1 steps)
  weakagreement_ue_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev_noChanRev (all-traces): analysis incomplete (1 steps)
  weakagreement_ue_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev (all-traces): analysis incomplete (1 steps)
  weakagreement_ue_seaf_noAsyKeyRev_noSupiRev_noSqnRev (all-traces): analysis incomplete (1 steps)
  weakagreement_ue_seaf_noAsyKeyRev_noSupiRev (all-traces): analysis incomplete (1 steps)
  weakagreement_ue_seaf_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  weakagreement_ue_seaf (all-traces): analysis incomplete (1 steps)
  weakagreement_ue_seaf_keyConf_noRev (all-traces): analysis incomplete (1 steps)
  weakagreement_ue_seaf_keyConf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev_noChanRev (all-traces): verified (4 steps)
  weakagreement_ue_hss_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev (all-traces): analysis incomplete (1 steps)
  cleanAttack_injectiveagreement_ue_hss_supi_noRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_ue_hss_supi_noKeyRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_ue_hss_kseaf_noRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_ue_hss_snname_noRev (all-traces): analysis incomplete (1 steps)
  weakagreement_ue_hss_keyConf_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev (all-traces): analysis incomplete (1 steps)
  injectiveagreement_ue_hss_kseaf_keyConf_noKeyRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_ue_hss_snname_keyConf_noKeyRev (all-traces): analysis incomplete (1 steps)
  cleanAttack_injectiveagreement_ue_hss_keyConf_supi_noRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_ue_hss_keyConf_supi_noKeyRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_seaf_ue_kseaf_noRev (all-traces): analysis incomplete (1 steps)
  cleanAttack_injectiveagreement_seaf_ue_supi_noRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_seaf_ue_supi_noKeyRev_noChanRev (all-traces): analysis incomplete (1 steps)
  weakagreement_seaf_ue_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev (all-traces): analysis incomplete (1 steps)
  weakagreement_seaf_ue_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev (all-traces): analysis incomplete (1 steps)
  weakagreement_seaf_ue_noKeyRev_noChanRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_seaf_ue_kseaf_keyConf_noRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_seaf_ue_keyConf_supi_noKeyRev_noChanRev (all-traces): analysis incomplete (1 steps)
  weakagreement_seaf_ue_KeyConf_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev (all-traces): analysis incomplete (1 steps)
  weakagreement_seaf_ue_KeyConf_noKeyRev_noChanRev (all-traces): analysis incomplete (1 steps)
  weakagreement_seaf_ue_KeyConf_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev (all-traces): analysis incomplete (1 steps)
  weakagreement_seaf_hss_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_seaf_hss_kseaf_noChanRev (all-traces): analysis incomplete (1 steps)
  injectiveagreement_seaf_hss_kseaf_noChanRev_noSqnRev_noSupiRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  injectiveagreement_seaf_hss_kseaf_noKeyRev_noChanRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_seaf_hss_supi_noChanRev (all-traces): analysis incomplete (1 steps)
  weakagreement_seaf_hss_keyConf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_seaf_hss_kseaf_keyConf_noChanRev (all-traces): analysis incomplete (1 steps)
  injectiveagreement_seaf_hss_kseaf_keyConf_noChanRev_noSqnRev_noSupiRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  injectiveagreement_seaf_hss_kseaf_keyConf_noKeyRev_noChanRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_seaf_hss_keyConf_supi_noChanRev (all-traces): analysis incomplete (1 steps)
  injectiveagreement_hss_ue_kseaf_noKeyRev (all-traces): analysis incomplete (1 steps)
  weakagreement_hss_ue_noAsyKeyRev_noSupiRev_noSqnRev_noChanRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_hss_ue_supi_noKeyRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_hss_ue_snname_noKeyRev (all-traces): analysis incomplete (1 steps)
  injectiveagreement_hss_seaf_kseaf_noChanRev (all-traces): analysis incomplete (1 steps)
  weakagreement_hss_seaf_noAsyKeyRev_noSupiRev_noSqnRev_noKeyRev (all-traces): analysis incomplete (1 steps)
  noninjectiveagreement_hss_seaf_supi_noRev (all-traces): analysis incomplete (1 steps)
  cleanAttack_secrecy_ue_supi_noRev (all-traces): analysis incomplete (1 steps)
  secrecy_ue_supi_noChanRevAtAll_noSupiRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_ue_supi_noChanRevAtAll_noSupiRev_noKeyRev_noSqnRev (all-traces): analysis incomplete (1 steps)
  cleanAttack_secrecy_ue_supi_keyConf_noRev (all-traces): analysis incomplete (1 steps)
  secrecy_ue_kseaf_noKeyRev_noChanRev (all-traces): analysis incomplete (1 steps)
  secrecy_ue_kseaf_noChanRev_noSupiRev_noSqnRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_ue_kseaf_noKeyRev_noSupiRev_noSqnRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_ue_k_noKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_hss_kseaf_noKeyRev_noSupiRev_noSqnRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_hss_kseaf_noChanRev_noSupiRev_noSqnRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_hss_kseaf_noChanRev_noKeyRev (all-traces): analysis incomplete (1 steps)
  cleanAttack_secrecy_hss_supi_noRev (all-traces): analysis incomplete (1 steps)
  secrecy_hss_supi_noChanRevAtAll_noSupiRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_hss_supi_noChanRevAtAll_noSupiRev_noKeyRev_noSqnRev (all-traces): analysis incomplete (1 steps)
  secrecy_hss_k_noKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_seaf_kseaf_noChanRev_noKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_seaf_kseaf_noChanRev_noSupiRev_noSqnRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_seaf_kseaf_noKeyRev_noSupiRev_noSqnRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  cleanAttack_secrecy_seaf_supi_noRev (all-traces): analysis incomplete (1 steps)
  secrecy_seaf_supi_noChanRevAtAll_noSupiRev_noAsyKeyRev (all-traces): analysis incomplete (1 steps)
  secrecy_seaf_supi_noChanRevAtAll_noSupiRev_noKeyRev_noSqnRev (all-traces): analysis incomplete (1 steps)

==============================================================================
